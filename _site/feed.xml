<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-14T01:32:44+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chris Miller’s 5th Blog</title><subtitle>My personal blog, 5th version</subtitle><author><name>Chris Miller</name></author><entry><title type="html">Command for keeping your phone awake while plugged in</title><link href="http://localhost:4000/2025/04/13/adb-stay-on/" rel="alternate" type="text/html" title="Command for keeping your phone awake while plugged in" /><published>2025-04-13T00:00:00+00:00</published><updated>2025-04-13T00:00:00+00:00</updated><id>http://localhost:4000/2025/04/13/adb-stay-on</id><content type="html" xml:base="http://localhost:4000/2025/04/13/adb-stay-on/"><![CDATA[<p><img src="/assets/images/steampunk-robot-with-phone.jpg" alt="Automating the settings" /></p>

<p>Usually when I’m writing .NET MAUI code for Android, I use an emulator to test the code. It’s fast and there are fewer things that can go wrong. And most of time it’s good enough.</p>

<p>When you need to access something hardware related, you want real hardware. I’m working on stuff that uses BLE and you can’t really test with an emulator. You need the real deal. So I’ll use my phone.</p>

<p>One annoyance of using a real device is that it will turn the screen off after X minutes of inactivity. Usually just before you want to test some code. There is a setting that you can change to override this.</p>

<p>If you go to Developer Options, under settings, there should be a setting named <a href="https://developer.android.com/studio/debug/dev-options#general">“Stay awake”</a>. You need to have developer mode enabled, but if you are writing Android apps you already know that.</p>

<p><img src="/assets/images/developer-options.png" alt="Developer Options" /></p>

<p>I’m lazy and I hate having to dig through options. This is something that you can do through the command line. You can enable the stay awake session with the following <a href="https://developer.android.com/tools/adb">adb</a> command:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">adb</span><span class="w"> </span><span class="nx">shell</span><span class="w"> </span><span class="nx">settings</span><span class="w"> </span><span class="nx">put</span><span class="w"> </span><span class="nx">global</span><span class="w"> </span><span class="nx">stay_on_while_plugged_in</span><span class="w"> </span><span class="nx">3</span></code></pre></figure>

<p>And to turn it, do the following:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">adb</span><span class="w"> </span><span class="nx">shell</span><span class="w"> </span><span class="nx">settings</span><span class="w"> </span><span class="nx">put</span><span class="w"> </span><span class="nx">global</span><span class="w"> </span><span class="nx">stay_on_while_plugged_in</span><span class="w"> </span><span class="nx">0</span></code></pre></figure>

<p>To get the current status, use this</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">adb</span><span class="w"> </span><span class="nx">shell</span><span class="w"> </span><span class="nx">settings</span><span class="w"> </span><span class="nx">get</span><span class="w"> </span><span class="nx">global</span><span class="w"> </span><span class="nx">stay_on_while_plugged_in</span></code></pre></figure>

<p>To make this even <del>lazier</del> easier for me, I added a pair of functions to my PowerShell profile.</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="kr">function</span><span class="w"> </span><span class="nf">adb-stay-on</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="o">.</span><span class="nv">${Env:ProgramFiles(x86)}</span><span class="n">\Android\android-sdk\platform-tools\adb.exe</span><span class="w"> </span><span class="nx">shell</span><span class="w"> </span><span class="nx">settings</span><span class="w"> </span><span class="nx">put</span><span class="w"> </span><span class="nx">global</span><span class="w"> </span><span class="nx">stay_on_while_plugged_in</span><span class="w"> </span><span class="nx">3</span><span class="w">  
</span><span class="p">}</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">adb-stay-off</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="o">.</span><span class="nv">${Env:ProgramFiles(x86)}</span><span class="n">\Android\android-sdk\platform-tools\adb.exe</span><span class="w"> </span><span class="nx">shell</span><span class="w"> </span><span class="nx">settings</span><span class="w"> </span><span class="nx">put</span><span class="w"> </span><span class="nx">global</span><span class="w"> </span><span class="nx">stay_on_while_plugged_in</span><span class="w"> </span><span class="nx">0</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Let’s break that down</p>

<p><code class="language-plaintext highlighter-rouge">.</code> means that this is an executable</p>

<p><code class="language-plaintext highlighter-rouge">${Env:ProgramFiles(x86)}</code> is the environment variable that points to the <code class="language-plaintext highlighter-rouge">Program Files (x86)</code> folder</p>

<p><code class="language-plaintext highlighter-rouge">${Env:ProgramFiles(x86)}\Android\android-sdk\platform-tools\adb.exe</code> is the full path to the adb command</p>

<p><code class="language-plaintext highlighter-rouge">shell settings put global stay_on_while_plugged_in 3 </code> Shell accesses the OS, settings put means update a setting and stay_on_while_plugged_in 3 is the setting to enable the stay on setting.</p>

<p>The functions work even when I don’t have adb on the path. Now I can invoke <code class="language-plaintext highlighter-rouge">adb-stay-on</code> when I have connected my phone to my PC to use for debugging. And when I’m done, I can just <code class="language-plaintext highlighter-rouge">invoke adb-stay-off</code>.</p>

<p>This will not prevent the device from going to the lock screen. There are various ways of preventing that. I have a Samsung Galaxy and I have it set to stay unlocked when I’m home.</p>]]></content><author><name>anotherlab</name></author><category term="powershell" /><category term="abd" /><category term="power" /><summary type="html"><![CDATA[Usually when I’m writing .NET MAUI code for Android, I use an emulator to test the code. It’s fast and there are fewer things that can go wrong. And most of time it’s good enough. When you need to access something hardware related, you want real hardware. I’m working on stuff that uses BLE and you can’t really test with an emulator. You need the real deal. So I’ll use my phone. One annoyance of using a real device is that it will turn the screen off after X minutes of inactivity. Usually just before you want to test some code. There is a setting that you can change to override this. If you go to Developer Options, under settings, there should be a setting named “Stay awake”. You need to have developer mode enabled, but if you are writing Android apps you already know that. I’m lazy and I hate having to dig through options. This is something that you can do through the command line. You can enable the stay awake session with the following adb command: adb shell settings put global stay_on_while_plugged_in 3 And to turn it, do the following: adb shell settings put global stay_on_while_plugged_in 0 To get the current status, use this adb shell settings get global stay_on_while_plugged_in To make this even lazier easier for me, I added a pair of functions to my PowerShell profile. function adb-stay-on { .${Env:ProgramFiles(x86)}\Android\android-sdk\platform-tools\adb.exe shell settings put global stay_on_while_plugged_in 3 } function adb-stay-off { .${Env:ProgramFiles(x86)}\Android\android-sdk\platform-tools\adb.exe shell settings put global stay_on_while_plugged_in 0 } Let’s break that down . means that this is an executable ${Env:ProgramFiles(x86)} is the environment variable that points to the Program Files (x86) folder ${Env:ProgramFiles(x86)}\Android\android-sdk\platform-tools\adb.exe is the full path to the adb command shell settings put global stay_on_while_plugged_in 3 Shell accesses the OS, settings put means update a setting and stay_on_while_plugged_in 3 is the setting to enable the stay on setting. The functions work even when I don’t have adb on the path. Now I can invoke adb-stay-on when I have connected my phone to my PC to use for debugging. And when I’m done, I can just invoke adb-stay-off. This will not prevent the device from going to the lock screen. There are various ways of preventing that. I have a Samsung Galaxy and I have it set to stay unlocked when I’m home.]]></summary></entry><entry><title type="html">Breaking and then fixing my app’s CFBundleShortVersionString</title><link href="http://localhost:4000/2025/03/10/CFBundleShortVersionString/" rel="alternate" type="text/html" title="Breaking and then fixing my app’s CFBundleShortVersionString" /><published>2025-03-10T00:00:00+00:00</published><updated>2025-03-10T00:00:00+00:00</updated><id>http://localhost:4000/2025/03/10/CFBundleShortVersionString</id><content type="html" xml:base="http://localhost:4000/2025/03/10/CFBundleShortVersionString/"><![CDATA[<p><img src="/assets/images/steampunk-mobile-app-assembly-line.jpg" alt="Made to order" /></p>

<p>So I had this bug reported where the app was reporting the wrong version number. Only for iOS, it was correct on Android. It’s an app created with .NET MAUI and it gets built as part of a GitHub workflow when the main branch is updated. The MAUI code that shows the version number is the same for Android and iOS. That indicated the version information was not being set correctly.</p>

<p>We have two version numbers in the app. For iOS, they are named <a href="https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleversion">CFBundleVersion</a> and <a href="https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleshortversionstring">CFBundleShortVersionString</a>. CFBundleShortVersionString is supposed to be user-visible version of CFBundleVersion. If CFBundleVersion is set to “1.2.345”, then CFBundleShortVersionString could be set to “1.2 build 345”.</p>

<p><code class="language-plaintext highlighter-rouge">CFBundleVersion</code> is the value that identifies the version of the build. Becareful when you set this. It can go up, but it can’t go back down. The original developer didn’t understand how this worked and when they first submitted the app to the Apple app store, they thought it had to be an integer. Instead of setting the value to “1.2.3456”, they set it to something like “1023456”. It got out of sync with <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code>.</p>

<p>This was back when it was a Xamarin.Forms app. In Xamarin.Forms, we set <code class="language-plaintext highlighter-rouge">CFBundleVersion</code> and <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code> in the <a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html">Info.plist</a> file. In .NET MAUI, you can set that in the .csproj project file. the Info.plist, or via command line parameters. I had placeholder values in the project file and used the command line parameters to set the version numbers as part of the build command.</p>

<p>I have a GitHub workflow set up for when the main branch is updated. It uses an open-source GutHub action named <a href="https://github.com/haya14busa/action-bumpr">action-bumpr</a>. This action-bumpr action can set all or part of semantic version number.</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">bump-version</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">outputs</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">${{ steps.clean_version.outputs.version }}</span>
      <span class="na">versioncode</span><span class="pi">:</span> <span class="s">${{ steps.clean_version.outputs.versioncode }}</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">haya14busa/action-bumpr@v1</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">bumpr</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github_token</span><span class="pi">:</span> <span class="s">${{ github.token }}</span>
          <span class="na">default_bump_level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">patch'</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">clean version</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">clean_version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">v=${{ steps.bumpr.outputs.next_version }}</span>
          <span class="s">v=${v:1}</span>
          <span class="s">echo "version=$v" &gt;&gt; $GITHUB_OUTPUT</span>
          <span class="s">count=$(git rev-list --count HEAD)</span>
          <span class="s">let "count += 2100000"</span>
          <span class="s">echo "versioncode=$count" &gt;&gt; $GITHUB_OUTPUT</span>
</code></pre></div></div>
<!--  -->

<p>The <code class="language-plaintext highlighter-rouge">version</code> variable ends up with “1.2.3456” and <code class="language-plaintext highlighter-rouge">versioncount</code> gets the build count with a “magic number” of 2100000 added to it. The versioncount variable is being set this way only because we had it wrong from day one and you can only go up in value.</p>

<p>The “jobs:” job is used by a job called “build-ios:”. After doing all of the setup stuff, it fires up the following command to build the app</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Publish iOS</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">dotnet publish -c Release -f:net9.0-ios /p:ArchiveOnBuild=true /p:RuntimeIdentifier=ios-arm64 /p:ApplicationDisplayVersion=${{ needs.bump-version.outputs.version }} /p:ApplicationVersion=${{ needs.bump-version.outputs.versioncode }}</span>
        <span class="na">working-directory</span><span class="pi">:</span> <span class="s">MyApp</span>
</code></pre></div></div>
<!--  -->
<p>YAML’s formatting makes that hard to read in a blog post. If we just look at the version parameters:
<!--  --></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">/p:ApplicationDisplayVersion=${{ needs.bump-version.outputs.version }}</span>
<span class="s">/p:ApplicationVersion=${{ needs.bump-version.outputs.versioncode }}</span>
</code></pre></div></div>
<!--  -->

<p>The p:ApplicationDisplayVersion parameter maps to <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code> and /p:ApplicationVersion maps to CFBundleVersion. This is were the version values are passed. When I did the build, <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code> was not being set correctly. So I had decided to cheat and set it in Info.plist before calling the Publish iOS step.</p>

<!--  -->
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Update CFBundleShortVersionString</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">/usr/libexec/PlistBuddy ${{ github.workspace }}/MyStop/Platforms/iOS/Info.plist -c "set :CFBundleShortVersionString '${{ needs.bump-version.outputs.versioncode }}'";</span>
        <span class="na">working-directory</span><span class="pi">:</span> <span class="s">MyStop/Platforms/iOS</span>
</code></pre></div></div>
<!--  -->

<p>PlistBuddy is a tool that is part of MacOS. It lets you edit .plist files from the command line. You can give the “-h” parameter to some terse help. I found a nice guide <a href="https://github.com/captam3rica/plistbuddy-guide">here</a>.</p>

<p>This was were I made the mistake. I was setting <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code> to the version code and I should have used the version string. The root cause of the problem is that if you have <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code> defined in Info.plist, that value take precedence over any value specified from the command line. It’s usually the other way around, the command line takes precedence.</p>

<p>I though the fix would be easy. Remove <code class="language-plaintext highlighter-rouge">CFBundleShortVersionString</code> from Info.plist and remove the Plistbuddy lines from the workflow. That did set the correct version number. It didn’t fix the problem with correct x.y.zzzz format version number being considered lower than XXXXXXXX by Apple. So time for a hack.</p>

<p>In the C# code that provides the version number in the App, the code will branch.  If the platform is Android, just return the version number. If it’s iOS, check for X.Y.Z format and if that matches return that. If it’s an integer value, we make some assumptions.  We take number and subtract the “magic number” that we had added to the git revision number that we had used in the <code class="language-plaintext highlighter-rouge">bump-version:</code> job.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">let "count += 2100000"</span>
</code></pre></div></div>
<p>To convert that hot mess of a int to a user-readable version number, you could implement something like this:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="nf">GetVersionNumber</span><span class="p">(</span><span class="kt">string</span> <span class="n">someValue</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// Magic number and version prefix are hard coded</span>
	<span class="c1">// It is what it is</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">MagicNumber</span> <span class="p">=</span> <span class="m">2100000</span><span class="p">;</span>
	<span class="k">const</span> <span class="kt">string</span> <span class="n">prefix</span> <span class="p">=</span> <span class="s">"1.2"</span><span class="p">;</span>
	
	<span class="c1">// Sanity check on converting what we expect to get</span>
	<span class="c1">// to an int value</span>
	<span class="k">if</span> <span class="p">(</span><span class="kt">int</span><span class="p">.</span><span class="nf">TryParse</span><span class="p">(</span><span class="n">someValue</span><span class="p">,</span> <span class="k">out</span> <span class="kt">int</span> <span class="n">result</span><span class="p">))</span>
	<span class="p">{</span>
		<span class="n">result</span> <span class="p">-=</span> <span class="n">MagicNumber</span><span class="p">;</span>

		<span class="c1">// Format and return to the call</span>
		<span class="k">return</span> <span class="s">$"</span><span class="p">{</span><span class="n">prefix</span><span class="p">}</span><span class="s">.</span><span class="p">{</span><span class="n">result</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// If something wasn't correct, return something back</span>
	<span class="k">return</span> <span class="n">prefix</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>It’s a hack and it depends on the source code knowing what the X and Y are for the X.Y.ZZZZ parts of the version number. But it works.</p>]]></content><author><name>anotherlab</name></author><category term="versioning" /><category term="ios" /><category term="github" /><category term="yaml" /><category term="Info.plist" /><summary type="html"><![CDATA[So I had this bug reported where the app was reporting the wrong version number. Only for iOS, it was correct on Android. It’s an app created with .NET MAUI and it gets built as part of a GitHub workflow when the main branch is updated. The MAUI code that shows the version number is the same for Android and iOS. That indicated the version information was not being set correctly. We have two version numbers in the app. For iOS, they are named CFBundleVersion and CFBundleShortVersionString. CFBundleShortVersionString is supposed to be user-visible version of CFBundleVersion. If CFBundleVersion is set to “1.2.345”, then CFBundleShortVersionString could be set to “1.2 build 345”. CFBundleVersion is the value that identifies the version of the build. Becareful when you set this. It can go up, but it can’t go back down. The original developer didn’t understand how this worked and when they first submitted the app to the Apple app store, they thought it had to be an integer. Instead of setting the value to “1.2.3456”, they set it to something like “1023456”. It got out of sync with CFBundleShortVersionString. This was back when it was a Xamarin.Forms app. In Xamarin.Forms, we set CFBundleVersion and CFBundleShortVersionString in the Info.plist file. In .NET MAUI, you can set that in the .csproj project file. the Info.plist, or via command line parameters. I had placeholder values in the project file and used the command line parameters to set the version numbers as part of the build command. I have a GitHub workflow set up for when the main branch is updated. It uses an open-source GutHub action named action-bumpr. This action-bumpr action can set all or part of semantic version number. jobs: bump-version: runs-on: ubuntu-latest outputs: version: ${{ steps.clean_version.outputs.version }} versioncode: ${{ steps.clean_version.outputs.versioncode }} steps: - uses: actions/checkout@v2 - uses: haya14busa/action-bumpr@v1 id: bumpr with: github_token: ${{ github.token }} default_bump_level: 'patch' - name: clean version id: clean_version run: | v=${{ steps.bumpr.outputs.next_version }} v=${v:1} echo "version=$v" &gt;&gt; $GITHUB_OUTPUT count=$(git rev-list --count HEAD) let "count += 2100000" echo "versioncode=$count" &gt;&gt; $GITHUB_OUTPUT The version variable ends up with “1.2.3456” and versioncount gets the build count with a “magic number” of 2100000 added to it. The versioncount variable is being set this way only because we had it wrong from day one and you can only go up in value. The “jobs:” job is used by a job called “build-ios:”. After doing all of the setup stuff, it fires up the following command to build the app - name: Publish iOS run: dotnet publish -c Release -f:net9.0-ios /p:ArchiveOnBuild=true /p:RuntimeIdentifier=ios-arm64 /p:ApplicationDisplayVersion=${{ needs.bump-version.outputs.version }} /p:ApplicationVersion=${{ needs.bump-version.outputs.versioncode }} working-directory: MyApp YAML’s formatting makes that hard to read in a blog post. If we just look at the version parameters: /p:ApplicationDisplayVersion=${{ needs.bump-version.outputs.version }} /p:ApplicationVersion=${{ needs.bump-version.outputs.versioncode }} The p:ApplicationDisplayVersion parameter maps to CFBundleShortVersionString and /p:ApplicationVersion maps to CFBundleVersion. This is were the version values are passed. When I did the build, CFBundleShortVersionString was not being set correctly. So I had decided to cheat and set it in Info.plist before calling the Publish iOS step. - name: Update CFBundleShortVersionString run: /usr/libexec/PlistBuddy ${{ github.workspace }}/MyStop/Platforms/iOS/Info.plist -c "set :CFBundleShortVersionString '${{ needs.bump-version.outputs.versioncode }}'"; working-directory: MyStop/Platforms/iOS PlistBuddy is a tool that is part of MacOS. It lets you edit .plist files from the command line. You can give the “-h” parameter to some terse help. I found a nice guide here. This was were I made the mistake. I was setting CFBundleShortVersionString to the version code and I should have used the version string. The root cause of the problem is that if you have CFBundleShortVersionString defined in Info.plist, that value take precedence over any value specified from the command line. It’s usually the other way around, the command line takes precedence. I though the fix would be easy. Remove CFBundleShortVersionString from Info.plist and remove the Plistbuddy lines from the workflow. That did set the correct version number. It didn’t fix the problem with correct x.y.zzzz format version number being considered lower than XXXXXXXX by Apple. So time for a hack. In the C# code that provides the version number in the App, the code will branch. If the platform is Android, just return the version number. If it’s iOS, check for X.Y.Z format and if that matches return that. If it’s an integer value, we make some assumptions. We take number and subtract the “magic number” that we had added to the git revision number that we had used in the bump-version: job. let "count += 2100000" To convert that hot mess of a int to a user-readable version number, you could implement something like this: string GetVersionNumber(string someValue) { // Magic number and version prefix are hard coded // It is what it is const int MagicNumber = 2100000; const string prefix = "1.2"; // Sanity check on converting what we expect to get // to an int value if (int.TryParse(someValue, out int result)) { result -= MagicNumber; // Format and return to the call return $"{prefix}.{result}"; } // If something wasn't correct, return something back return prefix; } It’s a hack and it depends on the source code knowing what the X and Y are for the X.Y.ZZZZ parts of the version number. But it works.]]></summary></entry><entry><title type="html">Poka-yoke</title><link href="http://localhost:4000/2025/03/05/poka-yoke/" rel="alternate" type="text/html" title="Poka-yoke" /><published>2025-03-05T00:00:00+00:00</published><updated>2025-03-05T00:00:00+00:00</updated><id>http://localhost:4000/2025/03/05/poka-yoke</id><content type="html" xml:base="http://localhost:4000/2025/03/05/poka-yoke/"><![CDATA[<p><img src="/assets/images/robots-poka-yoke.jpg" alt="Not good" /></p>

<p>So I used poka-yoke (ポカヨケ) in a conversation yesterday. I am working on an update to an app that uses a web service. Under an extreme edge condition, the app would make an API call with a missing parameter that was required. This would error out on the service side and we caught it with the logs.</p>

<p>The simple fix was to change the API call so it would check for missing data coming in and just return without doing anything. I went full poka-yoke and also changed the app so it wouldn’t make the call until it had the required information. Easy enough fixes. When I was chatting with my boss about the fixes, I dropped the term poka-yoke into the chat.</p>

<p>Years ago, I worked on statistical process control (SPC) software for companies that made packaging material. The term poka-yoke was the buzzword of the day and it stuck in my brain. It’s a Japanese term to describe the methods used to prevent errors. If you can prevent your assembly line from making an error, your quality goes up.</p>

<p>To implement poka-yoke, at each manufacturing stage, there is something in place that prevents a faulty output from going on to the next step. A part that is out of tolerance could be automatically redirected to a rejected parts bin. Or a part can’t be welded if it’s not correctly aligned. By doing these checks inline, problems can be addressed earlier in the process. This saves production time and production materials.</p>

<p>An example would be a machine that cuts corugated cardboard sheets to make boxes. If the cardboard is not lined up correctly, you get box that doesn’t fold up correctly. We used an optical sensor to measure the position of the sheets as they went through the cutter to make sure they lined up correctly and then on the side to make sure that the cuts were in the right place and of the correct dimensions.</p>

<p>Through software, we can check those sheets faster than the operator. If something was out of alignment, we could stop the machine before too many sheets were ruined. We helped our clients reduce the amount of downtime and saved them a lot of money.</p>

<p>You have something in your kitchen that is an example of poke-yoke. Your microwave wont turn on unless the door is closed. That seems fairly obvious, but it’s a clear example of how poke-yoke can be implemented.</p>

<p>To apply the principles of poka-yoke to software, one goal would be to prevent an error from propagating through multiple services. We have that old saying. “Garbage in, garbage out”. If you apply poka-yoke to that, it becomes “Garbage in, garbage rejected”. My change to the app to not allow an API call with invalid data is another example of poka-yoke.</p>

<p>Poka-yoke was developed by an industrial engineer named <a href="https://en.wikipedia.org/wiki/Shigeo_Shingo">Shigeo Shingo</a> for the <a href="https://en.wikipedia.org/wiki/Toyota_Production_System">Toyota Production System</a> (TPS) back in the 1960s. If you ever heard the term “just-in-time” manufacturing, it came from TPS. A translation of poka-yoke means “error-proofing”, from the words “poka” meaning mistakes and “yokeru” meaning to avoid. Which is better than the first term that Shingo used, baka-yoke. That translates to “idiot-proofing”, which was less than popular with the machine operators.</p>]]></content><author><name>anotherlab</name></author><category term="quality code" /><category term="jargon" /><summary type="html"><![CDATA[So I used poka-yoke (ポカヨケ) in a conversation yesterday. I am working on an update to an app that uses a web service. Under an extreme edge condition, the app would make an API call with a missing parameter that was required. This would error out on the service side and we caught it with the logs. The simple fix was to change the API call so it would check for missing data coming in and just return without doing anything. I went full poka-yoke and also changed the app so it wouldn’t make the call until it had the required information. Easy enough fixes. When I was chatting with my boss about the fixes, I dropped the term poka-yoke into the chat. Years ago, I worked on statistical process control (SPC) software for companies that made packaging material. The term poka-yoke was the buzzword of the day and it stuck in my brain. It’s a Japanese term to describe the methods used to prevent errors. If you can prevent your assembly line from making an error, your quality goes up. To implement poka-yoke, at each manufacturing stage, there is something in place that prevents a faulty output from going on to the next step. A part that is out of tolerance could be automatically redirected to a rejected parts bin. Or a part can’t be welded if it’s not correctly aligned. By doing these checks inline, problems can be addressed earlier in the process. This saves production time and production materials. An example would be a machine that cuts corugated cardboard sheets to make boxes. If the cardboard is not lined up correctly, you get box that doesn’t fold up correctly. We used an optical sensor to measure the position of the sheets as they went through the cutter to make sure they lined up correctly and then on the side to make sure that the cuts were in the right place and of the correct dimensions. Through software, we can check those sheets faster than the operator. If something was out of alignment, we could stop the machine before too many sheets were ruined. We helped our clients reduce the amount of downtime and saved them a lot of money. You have something in your kitchen that is an example of poke-yoke. Your microwave wont turn on unless the door is closed. That seems fairly obvious, but it’s a clear example of how poke-yoke can be implemented. To apply the principles of poka-yoke to software, one goal would be to prevent an error from propagating through multiple services. We have that old saying. “Garbage in, garbage out”. If you apply poka-yoke to that, it becomes “Garbage in, garbage rejected”. My change to the app to not allow an API call with invalid data is another example of poka-yoke. Poka-yoke was developed by an industrial engineer named Shigeo Shingo for the Toyota Production System (TPS) back in the 1960s. If you ever heard the term “just-in-time” manufacturing, it came from TPS. A translation of poka-yoke means “error-proofing”, from the words “poka” meaning mistakes and “yokeru” meaning to avoid. Which is better than the first term that Shingo used, baka-yoke. That translates to “idiot-proofing”, which was less than popular with the machine operators.]]></summary></entry><entry><title type="html">Refresh of this blog</title><link href="http://localhost:4000/2025/03/04/blog-refresh/" rel="alternate" type="text/html" title="Refresh of this blog" /><published>2025-03-04T00:00:00+00:00</published><updated>2025-03-04T00:00:00+00:00</updated><id>http://localhost:4000/2025/03/04/blog-refresh</id><content type="html" xml:base="http://localhost:4000/2025/03/04/blog-refresh/"><![CDATA[<p><img src="/assets/images/pc_on_fire.jpg" alt="Not good" /></p>

<p>The blog has been updated. Not just posts, all of the stuff that generates it. This wasn’t planned…</p>

<p>About two weeks ago, the boot drive of my PC failed. The drive was a Samsung 980 Pro 2TB. I had two of them, one for the OS, the other for data. Went to my PC on a normal Sunday morning only to see the BIOS configuration screen. After a few failed reboots, I came to the conclusion that something was seriously not good with by boot drive.</p>

<p><img src="/assets/images/uefi-bios-11.gif" alt="Rut ro" />
<em><small>Not my motherboard, but close enough</small></em></p>

<p>What I didn’t know was that this drive was shipped with a <a href="https://www.tomshardware.com/news/samsung-980-pro-ssd-failures-firmware-update">notorious firmware bug</a>. Eventually it would permanently lock itself into readonly mode.</p>

<p>Most of my data is backed up on regular basis. I have a <a href="https://www.qnap.com/en-as/product/ts-464">QNAP server</a> with about 7 TB of RAID storage. Stuff that is important to me is backed up there. I have a healthy degree of paranoia about disk backups. I assume that it will all fail. I backup up documents to external USB drives and store them at my daughter’s house. I count on those drives failing after a few years and will rotate them out.</p>

<p>I figure we’ll have USB around for a while longer. I use to burn documents to CD and the DVD. I don’t have any drives with spinning parts in this computer. USB is enough.</p>

<p>I was a bit sloppy with backing up some of the stuff, so I had some code on the boot drive that I didn’t want to lose. I was able to make a Windows 11 boot USB stick and with that stick, I could open a CMD shell and read the data from the boot drive.  I copied to data drive and to an external drive.</p>

<p>I made a few attempts to reinstall Windows, but that drive was locked into readonly mode. I ordered a new drive from a local BestBuy and picked it up.  All they had were Samsung 990 Pro drives in the 2 TB size. So that’s what I bought. I like the M.2 NVMe drives. They are fast and they just install on the motherboard. No power or data cables. When I assembled this <a href="https://pcpartpicker.com/list/BwHP6r">PC</a> 3 years ago, I did it without any SATA drives.</p>

<p>Now it was time to get to work. I have a <a href="https://www.msi.com/Motherboard/MPG-Z690-EDGE-WIFI-DDR4">MSI Z690 Edge Wifi DD4 motherboard</a>. It’s nice, I like it. It has four M.2 slots. One of them is directly controlled by the CPU, the other 3 are controlled by the Z690 chipset. The one controlled by the CPU is where I have the boot drive. It’s located between the CPU and the first PCIe slot. All of the M.2 slots have heatsinks on them. Which have to be unscrewed to get at the slots</p>

<p>I used a Fractal Desigm Torrent case for this PC. It’s fan cooled and very quiet. I have a massive Noctua CPU cooler. It partially covers the M.2 slot and I had to angle a screw driver in to get the heatsink off and swap the old drive with the new one. I had also had to remove the GPU to get at the M.2 slot. It’s always fiddly to swap stuff on the motherboard, but it wasn’t too bad.</p>

<p>I booted from the Win11 stick and tried to install Windows. Here is where I shot myself in the foot. Windows numbers the drives, starting from 0. The boot drive was 0, the data was 1. For some reason, the data drive was now 0 and the new one was 1. I just assumed that because I was using the same slot for the new drive, the numbering would stay the same.I ended up deleting the partition on the good drive so the Win11 installer could start fresh.</p>

<p>It rebooted and kept coming back to the installer on the USB stick. After a few attempts, I pulled the data drive out and with just one drive, Windows setup was able to install Windows. After Windows came up and updated itself, I powered down and installed the data drive. It came up and of course my data was gone. It was backed up, but I had some images and code that were only the data drive. I ended up buying <a href="https://www.anyrecover.com/">an app</a> that claimed to be able to recover data from a deleted partition.</p>

<p>AnyRecover lived up to it’s claim. It wasn’t quick, but I recoved what I needed to a folder on the new boot drive. I then formatted the data drive and moved the data back. That’s when a friend told me that these 980 Pro drives had a firmware version that would eventually lock the drive into readonly. I bought the data drive a month after building the PC, the odds were high that it had the same firmware. Samssung has a handy <a href="https://semiconductor.samsung.com/consumer-storage/magician/">Magician</a> app. It can show the firmware and other settings and it can update the firmware.</p>

<p>So I downloaded and installed the Magician app and then installed the broken drive to see what the Magician would say. It showed that the new 990 Pro had the current firmware, but both 980 Pro’s were on the bad firmware. It was able to update the firmware for the data drive, but failed on the old boot drive. It did allow me to access the serial number of the drive.</p>

<p><img src="/assets/images/samsung-magician.png" alt="Samsung Magician" />
<em><small>Screenshot of the Samsung Magician</small></em></p>

<p>I went to the Samsung Support site and filed a warranty claim. They took the serial number and immediately gave me a RMA number and a label to print. I sent the failed 980 Pro in. A few days later, I received a new 990 Pro drive back. Now I had three M.2 drives of 2 TB capacity each, which more than I needed. I didn’t realize until I wrote this blog post that the QNAP box has two M.2 slots. I thought my PC was the only thing I had that could use the drive.</p>

<p>So I added it as a new drive and formatted as a <a href="https://learn.microsoft.com/en-us/windows/dev-drive/">Windows Dev Drive</a>. Dev Drives use the <a href="https://learn.microsoft.com/en-us/windows-server/storage/refs/refs-overview">ReFS</a> file system instead of NTFS and they are treated as a “trusted drive” by the OS. The usual antivirus and other security policies are not applied to Dev Drives. So that’s where all of my source code lives now. It’s supposed to be faster, but it’s hard to to tell.</p>

<p>Now that the PC was running again and my data was safe, I could start the long process of installing and configuring the apps that I use. That will be another blog post. There was a lot to install and I’m almost there. Some configuration was required to the the blog stuff working again and this post is more or less a validation check for that.</p>]]></content><author><name>anotherlab</name></author><category term="Jekyll Blog Ubuntu" /><category term="Samsung M.2" /><summary type="html"><![CDATA[The blog has been updated. Not just posts, all of the stuff that generates it. This wasn’t planned… About two weeks ago, the boot drive of my PC failed. The drive was a Samsung 980 Pro 2TB. I had two of them, one for the OS, the other for data. Went to my PC on a normal Sunday morning only to see the BIOS configuration screen. After a few failed reboots, I came to the conclusion that something was seriously not good with by boot drive. Not my motherboard, but close enough What I didn’t know was that this drive was shipped with a notorious firmware bug. Eventually it would permanently lock itself into readonly mode. Most of my data is backed up on regular basis. I have a QNAP server with about 7 TB of RAID storage. Stuff that is important to me is backed up there. I have a healthy degree of paranoia about disk backups. I assume that it will all fail. I backup up documents to external USB drives and store them at my daughter’s house. I count on those drives failing after a few years and will rotate them out. I figure we’ll have USB around for a while longer. I use to burn documents to CD and the DVD. I don’t have any drives with spinning parts in this computer. USB is enough. I was a bit sloppy with backing up some of the stuff, so I had some code on the boot drive that I didn’t want to lose. I was able to make a Windows 11 boot USB stick and with that stick, I could open a CMD shell and read the data from the boot drive. I copied to data drive and to an external drive. I made a few attempts to reinstall Windows, but that drive was locked into readonly mode. I ordered a new drive from a local BestBuy and picked it up. All they had were Samsung 990 Pro drives in the 2 TB size. So that’s what I bought. I like the M.2 NVMe drives. They are fast and they just install on the motherboard. No power or data cables. When I assembled this PC 3 years ago, I did it without any SATA drives. Now it was time to get to work. I have a MSI Z690 Edge Wifi DD4 motherboard. It’s nice, I like it. It has four M.2 slots. One of them is directly controlled by the CPU, the other 3 are controlled by the Z690 chipset. The one controlled by the CPU is where I have the boot drive. It’s located between the CPU and the first PCIe slot. All of the M.2 slots have heatsinks on them. Which have to be unscrewed to get at the slots I used a Fractal Desigm Torrent case for this PC. It’s fan cooled and very quiet. I have a massive Noctua CPU cooler. It partially covers the M.2 slot and I had to angle a screw driver in to get the heatsink off and swap the old drive with the new one. I had also had to remove the GPU to get at the M.2 slot. It’s always fiddly to swap stuff on the motherboard, but it wasn’t too bad. I booted from the Win11 stick and tried to install Windows. Here is where I shot myself in the foot. Windows numbers the drives, starting from 0. The boot drive was 0, the data was 1. For some reason, the data drive was now 0 and the new one was 1. I just assumed that because I was using the same slot for the new drive, the numbering would stay the same.I ended up deleting the partition on the good drive so the Win11 installer could start fresh. It rebooted and kept coming back to the installer on the USB stick. After a few attempts, I pulled the data drive out and with just one drive, Windows setup was able to install Windows. After Windows came up and updated itself, I powered down and installed the data drive. It came up and of course my data was gone. It was backed up, but I had some images and code that were only the data drive. I ended up buying an app that claimed to be able to recover data from a deleted partition. AnyRecover lived up to it’s claim. It wasn’t quick, but I recoved what I needed to a folder on the new boot drive. I then formatted the data drive and moved the data back. That’s when a friend told me that these 980 Pro drives had a firmware version that would eventually lock the drive into readonly. I bought the data drive a month after building the PC, the odds were high that it had the same firmware. Samssung has a handy Magician app. It can show the firmware and other settings and it can update the firmware. So I downloaded and installed the Magician app and then installed the broken drive to see what the Magician would say. It showed that the new 990 Pro had the current firmware, but both 980 Pro’s were on the bad firmware. It was able to update the firmware for the data drive, but failed on the old boot drive. It did allow me to access the serial number of the drive. Screenshot of the Samsung Magician I went to the Samsung Support site and filed a warranty claim. They took the serial number and immediately gave me a RMA number and a label to print. I sent the failed 980 Pro in. A few days later, I received a new 990 Pro drive back. Now I had three M.2 drives of 2 TB capacity each, which more than I needed. I didn’t realize until I wrote this blog post that the QNAP box has two M.2 slots. I thought my PC was the only thing I had that could use the drive. So I added it as a new drive and formatted as a Windows Dev Drive. Dev Drives use the ReFS file system instead of NTFS and they are treated as a “trusted drive” by the OS. The usual antivirus and other security policies are not applied to Dev Drives. So that’s where all of my source code lives now. It’s supposed to be faster, but it’s hard to to tell. Now that the PC was running again and my data was safe, I could start the long process of installing and configuring the apps that I use. That will be another blog post. There was a lot to install and I’m almost there. Some configuration was required to the the blog stuff working again and this post is more or less a validation check for that.]]></summary></entry><entry><title type="html">You can find me on Bluesky</title><link href="http://localhost:4000/2025/02/06/bluesky/" rel="alternate" type="text/html" title="You can find me on Bluesky" /><published>2025-02-06T00:00:00+00:00</published><updated>2025-02-06T00:00:00+00:00</updated><id>http://localhost:4000/2025/02/06/bluesky</id><content type="html" xml:base="http://localhost:4000/2025/02/06/bluesky/"><![CDATA[<p><img loading="lazy" class="aligncenter size-medium" src="https://photos.smugmug.com/Blog/n-zwT5d/2025/i-8TCX2Qm/0/NQn4T72595x5vLgj8nvz3LtjNVjSLf5bqffPHMrcR/M/bluesky-M.jpg" /></p>

<p>I’ve been on <a href="https://bsky.app/">Bluesky</a> for a while now. I still have my account on the dead bird site, but I haven’t posted to it in ages. Not since Musk decided to burn billions of dollars. I never announced that I had quit that site, I just stopped using it. There are few technical sites that are there, so I kept my account active so that I could view their posts.</p>

<p>I try to use the same handle on social media sites and Bluesky is no exception.  I’m using the default domain, so you can find me at <a href="https://bsky.app/profile/anotherlab.bsky.social">anotherlab.bsky.social</a>.</p>

<p>By the way, if you want to read a great book on how to wreck a company, I highly reccomend <a href="https://www.penguinrandomhouse.com/books/737290/character-limit-by-kate-conger-and-ryan-mac/">“Character Limit”</a>. It’s written by <a href="https://bsky.app/profile/did:plc:5siz7r23475fek2mj6p5zhzw">Kate Conger</a> and <a href="https://bsky.app/profile/rmac.bsky.social">Ryan Mac</a>. It’s an inside look of when Musk acquired Twitter.</p>]]></content><author><name>anotherlab</name></author><category term="Social Media" /><category term="Bluesky" /><summary type="html"><![CDATA[I’ve been on Bluesky for a while now. I still have my account on the dead bird site, but I haven’t posted to it in ages. Not since Musk decided to burn billions of dollars. I never announced that I had quit that site, I just stopped using it. There are few technical sites that are there, so I kept my account active so that I could view their posts. I try to use the same handle on social media sites and Bluesky is no exception. I’m using the default domain, so you can find me at anotherlab.bsky.social. By the way, if you want to read a great book on how to wreck a company, I highly reccomend “Character Limit”. It’s written by Kate Conger and Ryan Mac. It’s an inside look of when Musk acquired Twitter.]]></summary></entry><entry><title type="html">Apple needs to sort out their API</title><link href="http://localhost:4000/2024/08/27/apples-api-needs-to-be-sorted/" rel="alternate" type="text/html" title="Apple needs to sort out their API" /><published>2024-08-27T00:00:00+00:00</published><updated>2024-08-27T00:00:00+00:00</updated><id>http://localhost:4000/2024/08/27/apples-api-needs-to-be-sorted</id><content type="html" xml:base="http://localhost:4000/2024/08/27/apples-api-needs-to-be-sorted/"><![CDATA[<p style="text-align: center;"><img src="/assets/steam-punk-scientist.jpg" alt="Who broke the API?" /></p>

<p>I have some code that uses Apple’s <a href="https://developer.apple.com/documentation/appstoreconnectapi">AppConnect API</a> to query App store related things. I wrote a C# script that I run from <a href="https://www.linqpad.net/">LINQPad</a> that gives me a weekly status update for the account. We link provisioned devices to the registered users in the account by their name. By querying the device list and referencing it wiht the user list, I quickly identify when someome provisions a new device without identifying who has that device.</p>

<p>Why do I need to do that? Apple only allows 100 devices per type to be provisioned as a developer device. 100 iPhones, 100 iPads, etc.  You need to provision a device with Apple to run development code on it. When you a have bigger team, 100 is a hard limit to manage.  We only allow a developer to provision one device type. Matching the name to the user is how we manage it.</p>

<p>I ran the script this morning and it reported devices that were fine as being invalid. Like my boss’s iPad. I knew his user account was still valid, so something broke in my script. I ran the script again and his device was fine. Ran it again and it was a problem again. That’s weird.</p>

<p>I tore apart my script and the code that retrieves the user list uses the List Users endpoint, documented <a href="https://developer.apple.com/documentation/appstoreconnectapi/list_users">here</a>.</p>

<p>I have the following code to call the API and get the set of users</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUsers</span><span class="p">(</span><span class="kt">string</span> <span class="n">token</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">,</span> <span class="kt">string</span> <span class="n">nextUrl</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">();</span>

  <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="n">Authorization</span> <span class="p">=</span>
    <span class="k">new</span> <span class="nf">AuthenticationHeaderValue</span><span class="p">(</span><span class="s">"Bearer"</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>

  <span class="kt">var</span> <span class="n">url</span> <span class="p">=</span> <span class="n">nextUrl</span> <span class="p">??</span> <span class="s">$"https://api.appstoreconnect.apple.com/v1/users?limit=</span><span class="p">{</span><span class="n">count</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
    
  <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetAsync</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">==</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">InternalServerError</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">result</span><span class="p">.</span><span class="nf">Dump</span><span class="p">();</span>
    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">();</span>

    <span class="k">return</span> <span class="n">users</span><span class="p">.</span><span class="n">Result</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Let’s take a closer look at the following line</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">url</span> <span class="p">=</span> <span class="n">nextUrl</span> <span class="p">??</span> <span class="s">$"https://api.appstoreconnect.apple.com/v1/users?limit=</span><span class="p">{</span><span class="n">count</span><span class="p">}</span><span class="s">"</span><span class="p">;</span></code></pre></figure>

<p>The users api call will return a set of records, based on the value of of the limit parameter. The maximum number of rows that can be returned is 200. I set the value of count to 100. We have 160 users. The first we call it, we pass in null for nextUrl.</p>

<p>In the JSON data that is returned, we have an object containing the set of users and a Links.Next property. If there are more users, Links.Next will be set to a URI that will return the next set of users. So our call to get all of the users would like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">GetUserList</span><span class="p">(</span><span class="kt">string</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">users</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;();</span>
  
  <span class="kt">int</span> <span class="n">RequestSize</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>

  <span class="kt">var</span> <span class="n">jsonString</span> <span class="p">=</span> <span class="nf">GetUsers</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">RequestSize</span><span class="p">,</span> <span class="k">null</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">jsonString</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">users</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">var</span> <span class="n">appConnectUsers</span> <span class="p">=</span> <span class="n">AppConnectUsers</span><span class="p">.</span><span class="nf">FromJson</span><span class="p">(</span><span class="n">jsonString</span><span class="p">);</span>
  
  <span class="n">users</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">appConnectUsers</span><span class="p">.</span><span class="n">Data</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Attributes</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">User</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">UserName</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Username</span><span class="p">,</span> <span class="n">LastName</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Roles</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Roles</span><span class="p">.</span><span class="nf">ToList</span><span class="p">()</span> 
    <span class="p">}));</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">appConnectUsers</span><span class="p">.</span><span class="n">Links</span><span class="p">.</span><span class="n">Next</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">jsonString</span> <span class="p">=</span> <span class="nf">GetUsers</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">RequestSize</span><span class="p">,</span> <span class="n">appConnectUsers</span><span class="p">.</span><span class="n">Links</span><span class="p">.</span><span class="n">Next</span><span class="p">.</span><span class="nf">ToString</span><span class="p">()).</span><span class="n">Result</span><span class="p">;</span>
    <span class="n">appConnectUsers</span> <span class="p">=</span> <span class="n">AppConnectUsers</span><span class="p">.</span><span class="nf">FromJson</span><span class="p">(</span><span class="n">jsonString</span><span class="p">);</span>

    <span class="n">users</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">appConnectUsers</span><span class="p">.</span><span class="n">Data</span>
      <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Attributes</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">User</span><span class="p">()</span> <span class="p">{</span> 
        <span class="n">UserName</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Username</span><span class="p">,</span> <span class="n">LastName</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Roles</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Roles</span><span class="p">.</span><span class="nf">ToList</span><span class="p">()</span> 
      <span class="p">}));</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">users</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The Links.Next property has the value that we use for nextUrl. We use a while loop to keep requesting more data until Links.Next comes back as null. While I could have set the request size to 200 and retrieved all of the users in one shot, at some point we’ll have more than 200 and it was better to work out the “paging” now.</p>

<p>When I called GetUserList and dumped out the users returned, I saw a problem. I would always get 160 users. Each and every time.  But there would be duplicates for some users and others would be missing. And it was non-deterministic. Each time I ran it, I would get different results.</p>

<p>One of the query parameters to the list users command is sort. My boss suggested that they probably added sorting and give that a shot. He was wrong about sort being added to the API, but if I sorted by username, I would get all 160 users.  All I needed to do was to change the URL to this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">url</span> <span class="p">=</span> <span class="n">nextUrl</span> <span class="p">??</span> <span class="s">$"https://api.appstoreconnect.apple.com/v1/users?limit=</span><span class="p">{</span><span class="n">count</span><span class="p">}</span><span class="s">&amp;sort=username"</span><span class="p">;</span></code></pre></figure>

<p>And that solved the problem. All of users came back as expected. No duplicates and none were missing. Apple’s documentation for their API has a show API changes widget. The sort command was not new and it was not listed as a requirement. This was just one of those times when you have to keeping poking the code with a sharp stick to see what falls out.</p>]]></content><author><name>anotherlab</name></author><category term="Apple" /><category term="Apple" /><category term="C#" /><summary type="html"><![CDATA[I have some code that uses Apple’s AppConnect API to query App store related things. I wrote a C# script that I run from LINQPad that gives me a weekly status update for the account. We link provisioned devices to the registered users in the account by their name. By querying the device list and referencing it wiht the user list, I quickly identify when someome provisions a new device without identifying who has that device. Why do I need to do that? Apple only allows 100 devices per type to be provisioned as a developer device. 100 iPhones, 100 iPads, etc. You need to provision a device with Apple to run development code on it. When you a have bigger team, 100 is a hard limit to manage. We only allow a developer to provision one device type. Matching the name to the user is how we manage it. I ran the script this morning and it reported devices that were fine as being invalid. Like my boss’s iPad. I knew his user account was still valid, so something broke in my script. I ran the script again and his device was fine. Ran it again and it was a problem again. That’s weird. I tore apart my script and the code that retrieves the user list uses the List Users endpoint, documented here. I have the following code to call the API and get the set of users 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public async Task&lt;string&gt; GetUsers(string token, int count, string nextUrl) { var client = new HttpClient(); client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token); var url = nextUrl ?? $"https://api.appstoreconnect.apple.com/v1/users?limit={count}"; var result = await client.GetAsync(url); if (result.StatusCode == System.Net.HttpStatusCode.InternalServerError) { result.Dump(); return null; } else { var users = result.Content.ReadAsStringAsync(); return users.Result; } } Let’s take a closer look at the following line var url = nextUrl ?? $"https://api.appstoreconnect.apple.com/v1/users?limit={count}"; The users api call will return a set of records, based on the value of of the limit parameter. The maximum number of rows that can be returned is 200. I set the value of count to 100. We have 160 users. The first we call it, we pass in null for nextUrl. In the JSON data that is returned, we have an object containing the set of users and a Links.Next property. If there are more users, Links.Next will be set to a URI that will return the next set of users. So our call to get all of the users would like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 private List&lt;User&gt; GetUserList(string token) { List&lt;User&gt; users = new List&lt;User&gt;(); int RequestSize = 100; var jsonString = GetUsers(token, RequestSize, null).Result; if (jsonString == null) { return users; } var appConnectUsers = AppConnectUsers.FromJson(jsonString); users.AddRange(appConnectUsers.Data .Select(s =&gt; s.Attributes) .Select(s =&gt; new User() { UserName = s.Username, LastName = s.LastName, FirstName = s.FirstName, Roles = s.Roles.ToList() })); while (appConnectUsers.Links.Next != null) { jsonString = GetUsers(token, RequestSize, appConnectUsers.Links.Next.ToString()).Result; appConnectUsers = AppConnectUsers.FromJson(jsonString); users.AddRange(appConnectUsers.Data .Select(s =&gt; s.Attributes) .Select(s =&gt; new User() { UserName = s.Username, LastName = s.LastName, FirstName = s.FirstName, Roles = s.Roles.ToList() })); } return users; } The Links.Next property has the value that we use for nextUrl. We use a while loop to keep requesting more data until Links.Next comes back as null. While I could have set the request size to 200 and retrieved all of the users in one shot, at some point we’ll have more than 200 and it was better to work out the “paging” now. When I called GetUserList and dumped out the users returned, I saw a problem. I would always get 160 users. Each and every time. But there would be duplicates for some users and others would be missing. And it was non-deterministic. Each time I ran it, I would get different results. One of the query parameters to the list users command is sort. My boss suggested that they probably added sorting and give that a shot. He was wrong about sort being added to the API, but if I sorted by username, I would get all 160 users. All I needed to do was to change the URL to this: var url = nextUrl ?? $"https://api.appstoreconnect.apple.com/v1/users?limit={count}&amp;sort=username"; And that solved the problem. All of users came back as expected. No duplicates and none were missing. Apple’s documentation for their API has a show API changes widget. The sort command was not new and it was not listed as a requirement. This was just one of those times when you have to keeping poking the code with a sharp stick to see what falls out.]]></summary></entry><entry><title type="html">MyFirebaseMessagingService android:exported needs to be explicitly specified</title><link href="http://localhost:4000/2023/03/22/android-exported/" rel="alternate" type="text/html" title="MyFirebaseMessagingService android:exported needs to be explicitly specified" /><published>2023-03-22T00:00:00+00:00</published><updated>2023-03-22T00:00:00+00:00</updated><id>http://localhost:4000/2023/03/22/android-exported</id><content type="html" xml:base="http://localhost:4000/2023/03/22/android-exported/"><![CDATA[<p style="text-align: center;"><img src="//assets/steam_punk_beker.jpg" alt="Changing the API" /></p>

<p>I needed to make a small change to an Android apop that we have in the Google Play store. I made the change, generated a new apk and we submitted to the app store. And was immediately rejected by Google. Our app was targetting API level 30 and the Google now requires API level 31 or later.</p>

<p>The app is a Xamarin.Forms app and I opened up the Android project and changed changed android:targetSdkVersion in the manifest from 30 to 31. And then the app stopped building.
I have a new course that was just published this week on Pluralsight, <a href="http://www.pluralsight.com/courses/xamarin-forms-5-fundamentals.">“Xamarin.Forms 5 Fundamentals”</a>. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms.</p>

<p>From my own product blurb:</p>
<blockquote>
  <p>You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications.</p>
</blockquote>

<p>If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course.</p>

<p>If you are working with <a href="https://learn.microsoft.com/en-us/dotnet/maui?WT.mc_id=DT-MVP-5000200">Maui</a>, a lot of this will still be applicable. The parts that are different, well, stay tuned.</p>]]></content><author><name>anotherlab</name></author><category term="Android" /><category term="Xamarin" /><category term="Xamarin" /><category term="Android" /><category term="API" /><summary type="html"><![CDATA[I needed to make a small change to an Android apop that we have in the Google Play store. I made the change, generated a new apk and we submitted to the app store. And was immediately rejected by Google. Our app was targetting API level 30 and the Google now requires API level 31 or later. The app is a Xamarin.Forms app and I opened up the Android project and changed changed android:targetSdkVersion in the manifest from 30 to 31. And then the app stopped building. I have a new course that was just published this week on Pluralsight, “Xamarin.Forms 5 Fundamentals”. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms. From my own product blurb: You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications. If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course. If you are working with Maui, a lot of this will still be applicable. The parts that are different, well, stay tuned.]]></summary></entry><entry><title type="html">My new Xamarin.Forms 5 Pluralsight course is out</title><link href="http://localhost:4000/2022/09/21/psc-xf5-fundamentals/" rel="alternate" type="text/html" title="My new Xamarin.Forms 5 Pluralsight course is out" /><published>2022-09-21T00:00:00+00:00</published><updated>2022-09-21T00:00:00+00:00</updated><id>http://localhost:4000/2022/09/21/psc-xf5-fundamentals</id><content type="html" xml:base="http://localhost:4000/2022/09/21/psc-xf5-fundamentals/"><![CDATA[<p style="text-align: center;"><img src="/assets/cyberpunk3.jpg" alt="School is in session'?" /></p>

<p>I have a new course that was just published this week on Pluralsight, <a href="http://www.pluralsight.com/courses/xamarin-forms-5-fundamentals.">“Xamarin.Forms 5 Fundamentals”</a>. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms.</p>

<p>From my own product blurb:</p>
<blockquote>
  <p>You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications.</p>
</blockquote>

<p>If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course.</p>

<p>If you are working with <a href="https://learn.microsoft.com/en-us/dotnet/maui?WT.mc_id=DT-MVP-5000200">Maui</a>, a lot of this will still be applicable. The parts that are different, well, stay tuned.</p>]]></content><author><name>anotherlab</name></author><category term="Pluralsight" /><category term="Visual Studio" /><category term="Xamarin" /><category term="Xamarin" /><category term="Maui" /><summary type="html"><![CDATA[I have a new course that was just published this week on Pluralsight, “Xamarin.Forms 5 Fundamentals”. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms. From my own product blurb: You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications. If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course. If you are working with Maui, a lot of this will still be applicable. The parts that are different, well, stay tuned.]]></summary></entry><entry><title type="html">Running the iOS simulators after updating to Xcode 14</title><link href="http://localhost:4000/2022/09/17/Visual-Studio-New-Xcode/" rel="alternate" type="text/html" title="Running the iOS simulators after updating to Xcode 14" /><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><id>http://localhost:4000/2022/09/17/Visual-Studio-New-Xcode</id><content type="html" xml:base="http://localhost:4000/2022/09/17/Visual-Studio-New-Xcode/"><![CDATA[<p style="text-align: center;"><img src="/assets/giger-dev-001.png" alt="Deployment Target" /></p>
<p>So Apple updated Xcode on my Macbook from 13.4.1 to 14. I wasn’t paying much attention to the prompts or even the version numbers. After doing so, I could not longer access the iOS Simulators from Visual Studio. This happened for both Xamarin.Forms projects and for Maui. From Windows or the Mac, it was broken.</p>

<p>From the Mac, when I went to pick a simulator for a Maui project, this happened with <a href="https://learn.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#17.4.0-pre.2?WT.mc_id=DT-MVP-5000200">Visual Studio 2022 17.4, Preview 2</a>.</p>

<p style="text-align: center;"><img src="/assets/no_sim_edit.png" alt="Lower the 'Deployment Target'?" /></p>

<p>That “Lower the ‘Deployment Target’ to see the older simulators or check your Apple SDK path” message was somewhat less than helpful. I couldn’t figure out where to even set the Deployment target in Dotnet Maui.</p>

<p>I then loaded up a Xamarin.Forms app that was working fine a few days ago and saw the same results. I guess at this moment in time, Xcode 14 is not fully suppported. At some point it will all line up again, but in the meantime I need some iOS simulation. This wasn’t a regression in VS 17.4, this was Apple. Time to rollback Xcode and give that a shot.</p>

<p>Xcode is actually pretty decent about handling this. You can have multiple versions of Xcode installed and change up which one is the one that answers the call to duty. If you trying out Xcode betas, this is the way. All you need is gigabytes of disk storage and the patience to download and install the Xcode bits.</p>

<p>The first thing that you need to do is to download the version of Xcode to install. You can get every release of Xcode from xcodereleases.com. While that site is not Apple affiliated with Apple, all of the download links are from developer.appple.com. They are the official releases. I grabbed the final the Xcode 13 release, 13.4.1 from <a href="https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_13.4.1/Xcode_13.4.1.xip">here</a>.</p>

<p><a href="https://osxdaily.com/2018/11/02/open-extract-xip-file-mac/#:~:text=Assuming%20you%20haven't%20associated,the%20Finder%20of%20Mac%20OS.">Extract</a> the contents of the .xip file. It will be named Xcode.app. Since you already have an Xcode.app in the Applications folder, you’ll need to rename it. My preference is to name it with version. In this case, Xcode13_4_1.app. Then drag it to the Applications folder.</p>

<p>And then make it the default Xcode. From a shell, run the following</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>xcode-select <span class="nt">-s</span> /Applications/Xcode13_4_1.app</code></pre></figure>

<p>To verify that this is now the current version of Xcode, run the following</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>xcode-select <span class="nt">-p</span></code></pre></figure>

<p>That should come back with something like</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">/Applications/Xcode13_4_1.app/Contents/Developer</code></pre></figure>

<p>After doing that, I restarted Visual Studio and I had the simulators back</p>

<p style="text-align: center;"><img src="/assets/yes_sim_edit.png" alt="Thar be simulators'?" /></p>

<p>To switch back to latest version, just run xcode-select again</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>xcode-select <span class="nt">-s</span> /Applications/Xcode</code></pre></figure>

<p>After posting this, a friend <a href="https://twitter.com/BiloganSteve/status/1571477869817204738">posted</a> with a link to where this issue was raised.  It’s posted as an issue in the <a href="https://github.com/xamarin/xamarin-macios/issues/15954">xamarin/xamrin-macios</a> repo.</p>]]></content><author><name>anotherlab</name></author><category term="Coding" /><category term="Visual Studio" /><category term="Xcode" /><category term="Xamarin" /><category term="Maui" /><category term="xcode-select" /><summary type="html"><![CDATA[So Apple updated Xcode on my Macbook from 13.4.1 to 14. I wasn’t paying much attention to the prompts or even the version numbers. After doing so, I could not longer access the iOS Simulators from Visual Studio. This happened for both Xamarin.Forms projects and for Maui. From Windows or the Mac, it was broken. From the Mac, when I went to pick a simulator for a Maui project, this happened with Visual Studio 2022 17.4, Preview 2. That “Lower the ‘Deployment Target’ to see the older simulators or check your Apple SDK path” message was somewhat less than helpful. I couldn’t figure out where to even set the Deployment target in Dotnet Maui. I then loaded up a Xamarin.Forms app that was working fine a few days ago and saw the same results. I guess at this moment in time, Xcode 14 is not fully suppported. At some point it will all line up again, but in the meantime I need some iOS simulation. This wasn’t a regression in VS 17.4, this was Apple. Time to rollback Xcode and give that a shot. Xcode is actually pretty decent about handling this. You can have multiple versions of Xcode installed and change up which one is the one that answers the call to duty. If you trying out Xcode betas, this is the way. All you need is gigabytes of disk storage and the patience to download and install the Xcode bits. The first thing that you need to do is to download the version of Xcode to install. You can get every release of Xcode from xcodereleases.com. While that site is not Apple affiliated with Apple, all of the download links are from developer.appple.com. They are the official releases. I grabbed the final the Xcode 13 release, 13.4.1 from here. Extract the contents of the .xip file. It will be named Xcode.app. Since you already have an Xcode.app in the Applications folder, you’ll need to rename it. My preference is to name it with version. In this case, Xcode13_4_1.app. Then drag it to the Applications folder. And then make it the default Xcode. From a shell, run the following sudo xcode-select -s /Applications/Xcode13_4_1.app To verify that this is now the current version of Xcode, run the following sudo xcode-select -p That should come back with something like /Applications/Xcode13_4_1.app/Contents/Developer After doing that, I restarted Visual Studio and I had the simulators back To switch back to latest version, just run xcode-select again sudo xcode-select -s /Applications/Xcode After posting this, a friend posted with a link to where this issue was raised. It’s posted as an issue in the xamarin/xamrin-macios repo.]]></summary></entry><entry><title type="html">A quick check to see if the user’s locale is metric or imperial</title><link href="http://localhost:4000/2022/01/05/quick-check-for-if-the-locale-ismetric/" rel="alternate" type="text/html" title="A quick check to see if the user’s locale is metric or imperial" /><published>2022-01-05T00:00:00+00:00</published><updated>2022-01-05T00:00:00+00:00</updated><id>http://localhost:4000/2022/01/05/quick-check-for-if-the-locale-ismetric</id><content type="html" xml:base="http://localhost:4000/2022/01/05/quick-check-for-if-the-locale-ismetric/"><![CDATA[<p>While working on a demo mobile app for a course, I needed to know if the units of measurement on the app would be in <a href="https://en.wikipedia.org/wiki/Imperial_units">Imperial</a> units or <a href="https://en.wikipedia.org/wiki/Metric_system">Metric</a> units. Since I’m using C#, the tools are in the framework.</p>

<p>My first pass was just checking the locale and calling it imperial if the locale was “en-US”.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Globalization</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">locale</span> <span class="p">=</span> <span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">IsMetric</span> <span class="p">=</span> <span class="p">!</span><span class="n">locale</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span></code></pre></figure>

<p>It worked on my machine, but that is pretty flawed. It assumes that only the “en-US” locale use imperial units. While it often feels like the rest of the world is metric, the US is not the only country still on the imperial system. Both Liberia and Myanmar are in the imperial club.</p>

<p style="text-align: center;"><img src="/assets/say-it-works-on-my-machine-again.jpg" alt="Works on my machine" /></p>

<p>This code also makes the assumption that “en-US” is the only locale code for the US.  If you set your phone’s region to the US and the language to Spanish, the locale code could be “es-US”.  Instead of comparing against the locale name, we can use the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo">RegionInfo</a> class instead.  We can pass in the locale in to RegionInfo and check it’s <code class="language-plaintext highlighter-rouge">IsMetric</code> property.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Globalization</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">locale</span> <span class="p">=</span> <span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">regionInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RegionInfo</span><span class="p">(</span><span class="n">locale</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">IsMetric</span> <span class="p">=</span> <span class="n">regionInfo</span><span class="p">.</span><span class="n">IsMetric</span><span class="p">;</span></code></pre></figure>]]></content><author><name>Chris Miller</name></author><category term="Coding" /><category term="Localization" /><category term="Globalization" /><category term="C#" /><category term="CultureInfo" /><category term="RegionInfo" /><summary type="html"><![CDATA[While working on a demo mobile app for a course, I needed to know if the units of measurement on the app would be in Imperial units or Metric units. Since I’m using C#, the tools are in the framework. My first pass was just checking the locale and calling it imperial if the locale was “en-US”. using System.Globalization; var locale = CultureInfo.CurrentCulture.Name; var IsMetric = !locale.Equals("en-US"); It worked on my machine, but that is pretty flawed. It assumes that only the “en-US” locale use imperial units. While it often feels like the rest of the world is metric, the US is not the only country still on the imperial system. Both Liberia and Myanmar are in the imperial club. This code also makes the assumption that “en-US” is the only locale code for the US. If you set your phone’s region to the US and the language to Spanish, the locale code could be “es-US”. Instead of comparing against the locale name, we can use the RegionInfo class instead. We can pass in the locale in to RegionInfo and check it’s IsMetric property. using System.Globalization; var locale = CultureInfo.CurrentCulture.Name; var regionInfo = new RegionInfo(locale); var IsMetric = regionInfo.IsMetric;]]></summary></entry></feed>