<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-14T11:56:45-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chris Miller’s 4th Blog</title><subtitle>My personal blog, 4th version</subtitle><author><name>Chris Miller</name></author><entry><title type="html">Resolving the .NET MAUI “VersionCode 1.0 is invalid. It must be an integer value.” error when updating Visual Studio 2022 Preview</title><link href="http://localhost:4000/2021/10/20/resolving-the-net-maui-versioncode-1-0-is-invalid-it-must-be-an-integer-value-error-when-updating-visual-studio-2022-preview/" rel="alternate" type="text/html" title="Resolving the .NET MAUI “VersionCode 1.0 is invalid. It must be an integer value.” error when updating Visual Studio 2022 Preview" /><published>2021-10-21T00:19:33-04:00</published><updated>2021-10-21T00:19:33-04:00</updated><id>http://localhost:4000/2021/10/20/resolving-the-net-maui-versioncode-1-0-is-invalid-it-must-be-an-integer-value-error-when-updating-visual-studio-2022-preview</id><content type="html" xml:base="http://localhost:4000/2021/10/20/resolving-the-net-maui-versioncode-1-0-is-invalid-it-must-be-an-integer-value-error-when-updating-visual-studio-2022-preview/">&lt;p&gt;I installed the Visual Studio 2022 Preview 6 this evening. I had been using Preview 4. I installed Preview 5, but didn’t have a chance to play with it. I have a simple demo app that I have working with, a basic stopwatch type of app. That app had been created with Preview 4 and it more or less worked fine (unless you counted Mac Catalyst and Windows). After I installed Preview 6, I tried to run the project on Android. It failed to compile with the following error message:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
Severity	Code	Description	Project	File	Line	Suppression State
Error	XA0003	VersionCode 1.0 is invalid. It must be an integer value.
Parameter name: VersionCode	StopwatchMaui	....\StopwatchMaui\obj\Debug\net6.0-android\android\AndroidManifest.xml
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As a test, I created a new .NET MAUI app from Preview 6. It compiled and ran just fine.&lt;/p&gt;

&lt;p&gt;So who now, what now? When I first saw the error, I didn’t pay too much attention to the full path, just the file name. With .NET MAUI, there is an AndroidManifest.xml in the android platform folder.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-6fGFssK/0/fbc04600/O/01%20-%20Solution%20Explorer.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;And we take a look at the file, it’s pretty standard, pretty boring AndroidManifest.xml&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&amp;gt;
	&amp;lt;uses-sdk android:minSdkVersion=&quot;21&quot; android:targetSdkVersion=&quot;31&quot; /&amp;gt;
	&amp;lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/appicon&quot; android:roundIcon=&quot;@mipmap/appicon_round&quot; android:supportsRtl=&quot;true&quot;&amp;gt;&amp;lt;/application&amp;gt;
	&amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;No versionCode there. What’s going on? So I went back and actually read the error message and it was complaining about a version of AndroidManifest.xml located in obj\Debug\net6.0-android. That little fellow looks like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;!--
    This code was generated by a tool.
    It was generated from ....\StopwatchMaui\Platforms\Android\AndroidManifest.xml
    Changes to this file may cause incorrect behavior and will be lost if
    the contents are regenerated.
    --&amp;gt;
&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;1.0&quot; package=&quot;com.companyname.StopwatchMaui&quot; android:versionName=&quot;1.0.0&quot;&amp;gt;
  &amp;lt;uses-sdk android:minSdkVersion=&quot;21&quot; android:targetSdkVersion=&quot;31&quot; /&amp;gt;
  &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
  &amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&amp;gt;
  &amp;lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/appicon&quot; android:roundIcon=&quot;@mipmap/appicon_round&quot; android:supportsRtl=&quot;true&quot; android:name=&quot;crc64c1104ba8f6ea44b3.MainApplication&quot; android:label=&quot;StopwatchMaui&quot; android:debuggable=&quot;true&quot; android:extractNativeLibs=&quot;true&quot;&amp;gt;
    &amp;lt;activity android:configChanges=&quot;orientation|smallestScreenSize|screenLayout|screenSize|uiMode&quot; android:theme=&quot;@style/Maui.SplashTheme&quot; android:name=&quot;crc64c1104ba8f6ea44b3.MainActivity&quot; android:exported=&quot;true&quot;&amp;gt;
      &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;
        &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;
      &amp;lt;/intent-filter&amp;gt;
    &amp;lt;/activity&amp;gt;
    &amp;lt;receiver android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:label=&quot;Essentials Battery Broadcast Receiver&quot; android:name=&quot;crc64192d9de59b079c6d.BatteryBroadcastReceiver&quot; /&amp;gt;
    &amp;lt;receiver android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:label=&quot;Essentials Energy Saver Broadcast Receiver&quot; android:name=&quot;crc64192d9de59b079c6d.EnergySaverBroadcastReceiver&quot; /&amp;gt;
    &amp;lt;receiver android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:label=&quot;Essentials Connectivity Broadcast Receiver&quot; android:name=&quot;crc64192d9de59b079c6d.ConnectivityBroadcastReceiver&quot; /&amp;gt;
    &amp;lt;activity android:configChanges=&quot;orientation|screenSize&quot; android:name=&quot;crc64192d9de59b079c6d.IntermediateActivity&quot; /&amp;gt;
    &amp;lt;provider android:authorities=&quot;com.companyname.StopwatchMaui.fileProvider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot; android:name=&quot;xamarin.essentials.fileProvider&quot;&amp;gt;
      &amp;lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/xamarin_essentials_fileprovider_file_paths&quot; /&amp;gt;
    &amp;lt;/provider&amp;gt;
    &amp;lt;activity android:configChanges=&quot;orientation|screenSize&quot; android:name=&quot;crc64192d9de59b079c6d.WebAuthenticatorIntermediateActivity&quot; /&amp;gt;
    &amp;lt;service android:name=&quot;crc64396a3fe5f8138e3f.KeepAliveService&quot; /&amp;gt;
    &amp;lt;provider android:name=&quot;mono.MonoRuntimeProvider&quot; android:exported=&quot;false&quot; android:initOrder=&quot;1999999999&quot; android:authorities=&quot;com.companyname.StopwatchMaui.mono.MonoRuntimeProvider.__mono_init__&quot; /&amp;gt;
  &amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we look at line 8, we see the culprit&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: xml; gutter: false; highlight: [3]; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;lt;manifest 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; 
    android:versionCode=&quot;1.0&quot; 
    package=&quot;com.companyname.StopwatchMaui&quot; 
    android:versionName=&quot;1.0.0&quot;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the new app that was created in Preview 6, the same file had the following line:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: xml; gutter: false; highlight: [3]; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;lt;manifest 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; 
    android:versionCode=&quot;1&quot; 
    package=&quot;com.companyname.StopwatchMaui&quot; 
    android:versionName=&quot;1.0.0&quot;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;wp-block-image&quot;&gt;
  &lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-mF3bHJm/0/4ebec4dc/O/badgood.jpg?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So why is the first one bad and the second one good? In the wacky world of Android, android:versionCode has to have an integer value. This is documented &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/manifest-element&quot;&gt;here&lt;/a&gt;. So now we know what is the actual error, the next question is why that error occurred.&lt;/p&gt;

&lt;p&gt;We can’t just edit the obj\Debug\net6.0-android\AndroidManifest.xml file and call it a day. The next time you rebuild the app, that file gets generated from Platforms\Android\AndroidManifest.xml. And apparently it pulls in information from somewhere else as well.&lt;/p&gt;

&lt;p&gt;So I took a look at the .csproj files for the working and non-working apps. In the .csproj file generated by Preview 4, the version information was defined with the following two lines&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: xml; gutter: false; highlight: [2]; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;lt;!-- Versions --&amp;gt;
&amp;lt;ApplicationVersion&amp;gt;1.0&amp;lt;/ApplicationVersion&amp;gt;
&amp;lt;AndroidVersionCode&amp;gt;1&amp;lt;/AndroidVersionCode&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the new project freshly generated by Release 6, the same two lines were now a single line, with the ApplicationVersion now set with an integer value.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: xml; gutter: false; highlight: [2]; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;lt;!-- Versions --&amp;gt;
&amp;lt;ApplicationVersion&amp;gt;1&amp;lt;/ApplicationVersion&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I changed the “Versions” lines .csproj to match the single line used in the new .csproj Preview 6, the app compiled and deployed to Android. My best guess is that AndroidVersionCode was being used in Preview 4 and sometime after that, they made the breaking change to ApplicationVersion and jettisoned the AndroidVersionCode setting. It’s a preview release of Visual Studio and they are still baking .NET MAUI. This &lt;a href=&quot;https://developercommunity.visualstudio.com/t/versioncode-10-is-invalid/1553498&quot;&gt;kind of stuff happens&lt;/a&gt; and the end result is a better product.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Android" /><category term="MAUI" /><category term="android" /><category term="maui" /><summary type="html">I hit the &quot;VersionCode 1.0 is invalid&quot; error with .NET MAUI and resolved it.</summary></entry><entry><title type="html">Controlling a WSL installation of redis-server from the Windows command line</title><link href="http://localhost:4000/2021/10/18/controlling-a-wsl-installation-of-redis-server-from-the-windows-command-line/" rel="alternate" type="text/html" title="Controlling a WSL installation of redis-server from the Windows command line" /><published>2021-10-19T00:53:13-04:00</published><updated>2021-10-19T00:53:13-04:00</updated><id>http://localhost:4000/2021/10/18/controlling-a-wsl-installation-of-redis-server-from-the-windows-command-line</id><content type="html" xml:base="http://localhost:4000/2021/10/18/controlling-a-wsl-installation-of-redis-server-from-the-windows-command-line/">&lt;p&gt;If you like using &lt;a href=&quot;https://redis.io/&quot;&gt;redis&lt;/a&gt; for web site caching and you are writing and testing code locally from Windows, you’ll want to figure out how to run a local instance of redis-server. You have a few options. You can run it from another machine that’s running something vaguely Linux-like or MacOS. You can run it from a Docker container under Windows. Or you can run it directly from &lt;a href=&quot;http://Windows SubSystem (WSL) for Linux&quot; data-wplink-url-error=&quot;true&quot;&gt;Windows SubSystem (WSL) for Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the last few years, Windows (10, 11, Server 2019) comes with a compatibility layer that lets you run Linux binary executables. The current version is WSL 2, but I’m just going to refer to it as WSL.  If you don’t have installed already, just run the following command from an elevated shell (run as administrator)&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
wsl --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;figure class=&quot;wp-block-image size-large&quot;&gt;

&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-pTtQzxz/0/0a5988c8/L/02%20-%20wsl-install-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;Installing WSl via command line&quot; data-recalc-dims=&quot;1&quot; /&gt; &lt;figcaption&gt;Installing WSl via command line&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;It will install the bits that you need and then ask you to reboot your machine. For more information about installing and configuring WSL, Microsoft has some really good documentation at &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install&quot;&gt;Install WSL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The default Linux distribution for WSL is Ubuntu. After you reboot, you may see a Ubuntu shell for a while as Windows installs the bits that you need. It will churn for a bit and then ask you for a username and password. That password will be your sudo (user root) password. One that is done, you should see something like this.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-43gLWHP/0/54984ae6/L/02%20-%20ubuntu-install-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;Final step of installing WSL is configuring the default Linux distribution&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;Final step of installing WSL is configuring the default Linux distribution&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;The next thing to do is to install redis-server. We can install redis vis &lt;a href=&quot;https://en.wikipedia.org/wiki/APT_(software)&quot;&gt;apt-get&lt;/a&gt;, but before we do that, we need to update apt-get and remove some of the new install shininess off.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After updating apt-get, you’ll want to upgrade it. Confusing? Sort of. Update is updating the instance of apt-get, upgrade is updating all of the packages that were installed via apt-get. After that has finished, you can install redis-server&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
sudo apt-get install redis-server
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There will be some churn and finally, it be installed. Out of the box, redis will not be running. My personal preference is to only run redis when I’m actually using it for development. So I Iike to start and stop it from the command line. Here are commands that you need to know:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
sudo service redis-server status
sudo service redis-server start
sudo service redis-server stop
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ll start up redis with the service start command, and it will come back with a message that redis is starting. And you can use the service status command to verify that it’s running. The acid test is to connect to redis and see if it’s working. You can use the redis-cli tool to set and get a cache value. You should see something like this.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-vLhVGKK/0/6aaf4c9d/O/04%20-%20redis-cli.png?w=680&amp;#038;ssl=1&quot; alt=&quot;Running redis-cli from the Ubuntu shell&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;Running redis-cli from the Ubuntu shell&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;So now redis-server is running. If you close the shell and open up a new one, it will still be running. If you restart WSL or Windows, then it wont be running. Now you can always pop open an Ubuntu shell and start redis-server, but you can do it from a Windows command line&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
wsl sudo service redis-server status
&lt;/pre&gt;
&lt;/div&gt;
&lt;figure class=&quot;wp-block-image size-large&quot;&gt;

&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-ffr3dZN/0/71f62819/O/05%20-%20redis-pwsh.png?w=680&amp;#038;ssl=1&quot; alt=&quot;Running redis commands from PowerShell&quot; data-recalc-dims=&quot;1&quot; /&gt; &lt;figcaption&gt;Running redis commands from PowerShell&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;From the screenshot, you can see that WSL passed along the sudo service command to Ubunto. And because I used sudo, I was prompted for the root password. And it returned the same message that I would see from the Ubuntu shell. Since I only have Ubunto installed, that was the default Linux that received the command. If you have multiple distributions installed, you would use “wsl -d DistributionName”. You can get the names of the installed distributions with the “wsl -l” command. Unlike from the Linux shell, each time I invoke “sudo”, I’m prompted for the password. In the Linux shell, you are prompted just the first time you call sudo in a terminal session.&lt;/p&gt;

&lt;p&gt;Having to use the root password over and over again can be tedious on a development box. There is a way around that. You can add a file to the /etc/sudoers.d folder in the Linux distribution and remove the root password requirement for the redis-server service. From the Linux shell do the following&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
cd /etc/sudoers.d
sudo sh
echo &quot;%sudo ALL=(ALL) NOPASSWD: /usr/sbin/service redis-server *&quot; &amp;gt;&amp;gt; allowed-services
sudo chmod 0440 allowed-services
exit
&lt;/pre&gt;
&lt;/div&gt;
&lt;figure class=&quot;wp-block-image size-large&quot;&gt;

&lt;img src=&quot;https://i1.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-bdhLSQW/0/003b70be/O/06%20-%20sudoers.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &lt;/figure&gt;

&lt;p&gt;The first thing we do is make /etc/sudoers.d the current folder. Then we use “sudo sh” to gain root access. You need root access to work with this folder. The echo line basically says that you can invoke sudo with no password for redis-server and writes that setting to a file named allowed-services. The file name allowed-services is arbitrary, I picked it because it made sense to me. There is a file in the sudoers.d folder named README, it will explain what the file name restrictions are.&lt;/p&gt;

&lt;p&gt;The chmod 0440 command sets the permissions to read-only for the root account and is required for sudoers.d. This allows us to remove the sudo password requirement for redis-server and only for redis-server. Now we can go back to the Windows shell and run the wsl commands without being prompted.&lt;/p&gt;

&lt;p&gt;You can even run the redis-cli tool from powershell…&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-5jWGFRF/0/c4e9ba5e/O/07%20-%20redis-pwsh.png?w=680&amp;#038;ssl=1&quot; alt=&quot;Redis from PowerShell, no password&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;Redis from PowerShell, no password&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;The WIndows Subsystem for Linux is one of the hidden gems for developers. And this gem sparkles…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus Round!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because I’m lazy, I created shortcuts in my PowerShell profile. I added the following functions:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
function redstat {wsl sudo service redis-server status}
function redstart {wsl sudo service redis-server start}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now I can just check the redis-server status via “redstat”&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-MBk5v8J/0/afa5b1b0/O/08-redstat.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;/figure&amp;gt;&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Coding" /><category term="Linux" /><category term="linux" /><category term="Powershell" /><category term="redis" /><category term="wsl" /><summary type="html">Some shortcuts accessing redis-server running under WSL via PowerShell</summary></entry><entry><title type="html">How to access Apple’s App Connect API from C#, Python, and Go. – Part 4</title><link href="http://localhost:4000/2021/09/01/how-to-access-apples-app-connect-api-from-c-python-and-go-part-4/" rel="alternate" type="text/html" title="How to access Apple’s App Connect API from C#, Python, and Go. – Part 4" /><published>2021-09-01T07:56:57-04:00</published><updated>2021-09-01T07:56:57-04:00</updated><id>http://localhost:4000/2021/09/01/how-to-access-apples-app-connect-api-from-c-python-and-go-part-4</id><content type="html" xml:base="http://localhost:4000/2021/09/01/how-to-access-apples-app-connect-api-from-c-python-and-go-part-4/">&lt;p&gt;Welcome to Part 4 of a three part series. Last month, I did a series of posts on how to use Apple’s App Connect API to query the team membership list using &lt;a href=&quot;https://rajapet.com/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://rajapet.com/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3/&quot;&gt;Go&lt;/a&gt;, and &lt;a href=&quot;https://rajapet.com/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2/&quot;&gt;Python&lt;/a&gt;. This was code I was actually using myself and after I wrote it, it stopped working. The API calls were returning an HTTP 401 error. But only on Windows, on the Mac the code worked.&lt;/p&gt;

&lt;p&gt;That was an odd one to track down. It turned out to be a bug with how I was generating the expiration timestamp for the JWT payload.  Apple documents that you can specify up to 20 minutes into the future for the exp value. Don’t do the full 20 minutes. That works most of time. Until it doesn’t. Just set the timeout to 10 minutes into the future and Bob’s your uncle. &lt;/p&gt;

&lt;p&gt;I went back to the repo’s and changed the expiration timeout to 10 minutes for the &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-golang&quot;&gt;Go&lt;/a&gt;, and &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-python&quot;&gt;Python&lt;/a&gt; repos. The C# code was set to 30 minutes, that should have never worked. If you tried the C# code and wondered why it wasn’t working, that was my mistake.&lt;/p&gt;

&lt;p&gt;While I was updating the code, I changed the Go version so that you could validate multiple user names by placing them in a line delimited file and pass that file in with a “-userlist” command line parameter.  The code now reads all of the usernames and stores them in an array.  It then gets all of the team members and checks to see if any of the user names in the array match the team member list.  If you need to validate multiple users, this makes it a one and done task.&lt;/p&gt;

&lt;p&gt;The “-username” parameter can still be used if you just have one user to check. In that case, it’s treated as an array with just one item in it. If you use both “-username” and “-userlist”, the code will use the user list and ignore the user name passed on the command line.&lt;/p&gt;

&lt;p&gt;I’m not sure why the code worked when I originally wrote the posts a couple of months ago. My guess is that Apple used to allow timestamps longer than 20 minutes but made a change that now enforces the expiration to their published specification. Test for edge conditions, but avoid using them.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Apple" /><category term="Apple" /><category term="C" /><category term="C#" /><category term="Python" /><summary type="html">Welcome to Part 4 of a three part series. Last month, I did a series of posts on how to use Apple’s App Connect API to query the team membership list using C#, Go, and Python. This was code I was actually using myself and after I wrote it, it stopped working. The API calls were returning an HTTP 401 error. But only on Windows, on the Mac the code worked.</summary></entry><entry><title type="html">A quick PowerShell tip</title><link href="http://localhost:4000/2021/07/28/a-quick-powershell-tip/" rel="alternate" type="text/html" title="A quick PowerShell tip" /><published>2021-07-28T16:19:08-04:00</published><updated>2021-07-28T16:19:08-04:00</updated><id>http://localhost:4000/2021/07/28/a-quick-powershell-tip</id><content type="html" xml:base="http://localhost:4000/2021/07/28/a-quick-powershell-tip/">&lt;p&gt;I have a bunch of PowerShell functions that I stick in my $profile file. Simple stuff, things to make my day to day development work easier. With my sieve-like memory, I need a quick way to see the functions. So I wrote a script named “mine.ps1” and it’s basically a tiny help file.  It has stuff like this&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; title: ; notranslate&quot; title=&quot;&quot;&gt;
write-host Commands -ForegroundColor White
write-host &quot;get-guid-clipboard&quot; -ForegroundColor Yellow
write-host &quot;set-alias lsd get-by-date&quot; -ForegroundColor Yellow
write-host &quot;Set-Alias touch Set-FileTime&quot; -ForegroundColor Yellow
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my $profile, I define those functions. They could (and should) be in a separate file, but I’m lazy. This is part of my PowerShell profile:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; title: ; notranslate&quot; title=&quot;&quot;&gt;
function Set-FileTime{
    param(
      &amp;#91;string&amp;#91;]]$paths,
      &amp;#91;bool]$only_modification = $false,
      &amp;#91;bool]$only_access = $false
    )
  
    begin {
      function updateFileSystemInfo(&amp;#91;System.IO.FileSystemInfo]$fsInfo) {
        $datetime = get-date
        if ( $only_access )
        {
           $fsInfo.LastAccessTime = $datetime
        }
        elseif ( $only_modification )
        {
           $fsInfo.LastWriteTime = $datetime
        }
        else
        {
           $fsInfo.CreationTime = $datetime
           $fsInfo.LastWriteTime = $datetime
           $fsInfo.LastAccessTime = $datetime
         }
      }
     
      function touchExistingFile($arg) {
        if ($arg -is &amp;#91;System.IO.FileSystemInfo]) {
          updateFileSystemInfo($arg)
        }
        else {
          $resolvedPaths = resolve-path $arg
          foreach ($rpath in $resolvedPaths) {
            if (test-path -type Container $rpath) {
              $fsInfo = new-object System.IO.DirectoryInfo($rpath)
            }
            else {
              $fsInfo = new-object System.IO.FileInfo($rpath)
            }
            updateFileSystemInfo($fsInfo)
          }
        }
      }
     
      function touchNewFile(&amp;#91;string]$path) {
        #$null &amp;gt; $path
        Set-Content -Path $path -value $null;
      }
    }
   
    process {
      if ($_) {
        if (test-path $_) {
          touchExistingFile($_)
        }
        else {
          touchNewFile($_)
        }
      }
    }
   
    end {
      if ($paths) {
        foreach ($path in $paths) {
          if (test-path $path) {
            touchExistingFile($path)
          }
          else {
            touchNewFile($path)
          }
        }
      }
    }
  }

function get-by-date {get-childitem | sort LastWriteTime }
function get-guid-clipboard { &amp;#91;guid]::NewGuid() | Set-Clipboard }
set-alias lsd get-by-date
Set-Alias touch Set-FileTime
Set-Alias -Name guidc -Value get-guid-clipboard -Description &quot;Get a GUID and copy it to the clipboard&quot;
function get-mine {. d:\\scripts\mine.ps1}
write-host &quot;Type 'get-mine' for my local functions&quot;
&amp;#91;System.Net.Dns]::GetHostByName($env:computerName).HostName.ToLower()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The touch functions came from the &lt;a href=&quot;https://ss64.com/ps/syntax-touch.html&quot;&gt;ss64.com site&lt;/a&gt;. I end by displaying the current machine name. When you remote into a box of boxes, it’s good to know where you currently are. Now when I fire up a new shell, I’ll see something like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
PowerShell 7.1.3
Copyright (c) Microsoft Corporation.

https://aka.ms/powershell
Type 'help' to get help.

Type 'get-mine' for my local functions
uberbox
Loading personal and system profiles took 929ms.
&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Chris Miller</name></author><category term="PowerShell" /><category term="Powershell" /><category term="tips" /><summary type="html">Simple tip for adding your own memory aid to your PowerShell profile.</summary></entry><entry><title type="html">How to access Apple’s App Connect API from C#, Python, and Go. – Part 3</title><link href="http://localhost:4000/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3/" rel="alternate" type="text/html" title="How to access Apple’s App Connect API from C#, Python, and Go. – Part 3" /><published>2021-07-19T09:28:15-04:00</published><updated>2021-07-19T09:28:15-04:00</updated><id>http://localhost:4000/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3</id><content type="html" xml:base="http://localhost:4000/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3/">&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;https://i1.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-MdwkwLM/0/e733f438/L/Apple%20Lock%20Purple-L.jpg?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;In my &lt;a href=&quot;https://rajapet.com/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/&quot;&gt;first post&lt;/a&gt;, I wrote about a need to query my company’s membership list from our Apple app store development account. In that post, I used C# to query Apple’s API. &lt;a href=&quot;https://rajapet.com/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2/&quot;&gt;Part 2&lt;/a&gt; covered the Python version. For our final installment, we’ll cover how to accomplish the same task with &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with the C# and Python versions, we’ll need to create a signed Javascript Web Token (JWT) and then make some API calls.  I have the code in a Github repository. You can clone it from &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-golang&quot;&gt;here&lt;/a&gt;. As with the C# project, the code is spread over a couple of modules. &lt;/p&gt;

&lt;p&gt;The code should be portable across platforms. I used Go 1.13.2 on Windows. If you don’t have Go installed, you can grab it from the download page at &lt;a href=&quot;https://golang.org/dl/&quot;&gt;golang.org&lt;/a&gt;. This would be a good place to mention that the only experience that I have with Go is what I learned from writing this applet. I’m pretty comfortable with C#, but everything that I know about Python and Go came from writing this code.&lt;/p&gt;

&lt;p&gt;That disclaimer in place, after you install Go, you can grab the code from the &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-golang&quot;&gt;repository&lt;/a&gt; and follow along. As with the other projects, we use a 3rd party library to generate and sign the Javascript Web Token (JWT). When I wrote the code a couple of months ago, I used dgrijalva’s &lt;a href=&quot;https://github.com/dgrijalva/jwt-go&quot;&gt;jwt-go&lt;/a&gt; library. It’s no longer being maintained and it recomends to use a community supported clone of that project, &lt;a href=&quot;https://github.com/golang-jwt/jwt&quot;&gt;golang-jwt/jwt&lt;/a&gt;. While writing this blog post, I updated the code to use the community supported project.&lt;/p&gt;

&lt;div&gt;
  &lt;div&gt;
    If you clone the code from my repo, the jwt library should get downloaded when you build the code. If it doesn&amp;#8217;t you can install it the following command
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;go get github.com/golang-jwt/jwt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we run the code, lets take a tour of the code. The entry point is the module &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-golang/blob/main/AppleStoreApi.go&quot;&gt;IsUserInApple.go&lt;/a&gt;. You can follow along with the code from the repo. It will differ from the C# and Python versions by having named command line parameters. We start with the following code&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
package main

import (
	&quot;flag&quot;
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;path/filepath&quot;
)

func main() {
	// Define command line options
	configPtr := flag.String(&quot;config&quot;, &quot;./IsUserInApple.json&quot;, &quot;Configuration file&quot;)
	usernamePtr := flag.String(&quot;username&quot;, &quot;&quot;, &quot;Username to find (in quotes)&quot;)

	flag.Parse()

	var userName string = *usernamePtr
	var ConfigFileName string = *configPtr
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At line 4, we import the &lt;a href=&quot;https://pkg.go.dev/flag&quot;&gt;flag&lt;/a&gt; module. This module makes it simple to define and read command line parameters. We’ll define 2 parameters, one for the name of the config file (line 12), the second for the name to match (line 13). For our code, we’ll define them as string variables. We pass in the name of the command line parameter, default value, and the help text.&lt;/p&gt;

&lt;p&gt;After defining the parameters, we call &lt;a href=&quot;https://pkg.go.dev/flag#Parse&quot;&gt;flag.Parse()&lt;/a&gt; to parse the command line parameters that are being passed in. Lines 17-18 assign the flag values to string variables. This code could probably be written with less code, but it works and it’s readable. The next bit of code checks to see if a username was passed. If it doesn’t, it prints the command line help and then quietly dies a good death.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
if len(userName) == 0 {
	fmt.Println(&quot;Please specify an email address to match (in quotes)&quot;)
	flag.PrintDefaults()
	os.Exit(1)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The next few lines check to see if a config file was specified.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;
if len(ConfigFileName) == 0 {
	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}
	ConfigFileName = filepath.Join(filepath.Dir(ex), &quot;IsUserInApple.json&quot;)
}

if _, err := os.Stat(ConfigFileName); os.IsNotExist(err) {
	fmt.Println(err)
	os.Exit(2)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At line 1, we see if a file has been specified. It hasn’t been specified, then we want to look in the folder that code is running from from for a file named IsUserInApple.json.  The &lt;a href=&quot;https://pkg.go.dev/os#Executable&quot;&gt;os.Executable()&lt;/a&gt; method will return the full path for the running code, or an error message if something went wrong. If that happens, we abandon ship with &lt;a href=&quot;https://gobyexample.com/panic&quot;&gt;panic()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are new to Go, it’s a little wierd to see both a return value and error message on the left side of a function call. But you get used to it after a while. And it’s a very clean way of getting errors back from a method call. After getting the path, we extract the directory and concatenate the name of the config file.  At line 9, we check to see if the file exists or die trying.&lt;/p&gt;

&lt;p&gt;At this point we have a filename for the configuration file and we can attempt to read it.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;
fmt.Println(&quot;Looking for &quot; + userName)

config, err := ReadConfig(ConfigFileName)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Time to dive into the ReadConfig() method. That code is in the &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-golang/blob/main/AppleJWT.go&quot;&gt;AppleJWT.go&lt;/a&gt; module. It’s not the cleanest separation of code, but just roll with it. We have a bunch of fun things going on here.  First things first are the imports:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
import (
	&quot;crypto/ecdsa&quot;
	&quot;crypto/x509&quot;
	&quot;encoding/json&quot;
	&quot;encoding/pem&quot;
	&quot;fmt&quot;
	&quot;io/ioutil&quot;
	&quot;log&quot;
	&quot;time&quot;

	&quot;github.com/golang-jwt/jwt&quot;
)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first 8 imports are modules that come with Go. The crypto modules are used for the JWT signing. The encoding modules let us read and parse JSON and PEM data. The last module is the external library that will be pulled directly from Github.&lt;/p&gt;

&lt;p&gt;Now we’ll define an object to contain the JSON data from the config file. This is a pretty simple object:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
type ConfigSettings struct {
	PrivateKeyFile string `json:&quot;PrivateKeyFile&quot;`
	KeyID          string `json:&quot;KeyID&quot;`
	IssuerID       string `json:&quot;IssuerID&quot;`
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That will map to the JSON format of the config file, which will look like this&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;
{
    &quot;PrivateKeyFile&quot;: &quot;path/to.your/privatekey.p8&quot;,
    &quot;KeyID&quot;: &quot;ABCDEF1234&quot;,
    &quot;IssuerID&quot;: &quot;d88b7c23-4c26-48fb-9d62-5649f27a25a2&quot;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are some handy online tools from converting JSON data to Go structs. I have used &lt;a href=&quot;https://mholt.github.io/json-to-go/&quot;&gt;JSON-to-Go&lt;/a&gt; and &lt;a href=&quot;https://transform.tools/json-to-go&quot;&gt;transform.tools&lt;/a&gt;, they both work pretty well. The JSON-to-Go tool gives you the option of using inline type definitions or separate structs for each type. After that we have the ReadConfig method&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
func ReadConfig(ConfigFileName string) (*ConfigSettings, error) {
	file, err := ioutil.ReadFile(ConfigFileName)

	if err != nil {
		return nil, err
	}

	config := new(ConfigSettings)

	err = json.Unmarshal(&amp;#91;]byte(file), &amp;amp;config)

	return config, err
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Line 1 defines the parameters, the name of the config file, and an error variable. Then we read the file at line 2 with the &lt;a href=&quot;https://pkg.go.dev/io/ioutil#ReadFile&quot;&gt;ReadFile&lt;/a&gt; method. If it fails, we return the error. At line 8, we create a new instance of the ConfigSettings struct that will contain our settings. Then at line 10, we use the &lt;a href=&quot;https://pkg.go.dev/encoding/json#Unmarshal&quot;&gt;Unmarshal()&lt;/a&gt; method to parse the JSON data into our ConfigSettings struct.&lt;/p&gt;

&lt;p&gt;That brings us back to our main method. &lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
if err != nil {
	fmt.Println(err)
	os.Exit(3)
}

CheckUserList(config, userName)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Skipping over error checking code, we now have the method that will ties this all together for us. Now we can dive in to CheckUserList() defined in &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-golang/blob/main/AppleStoreApi.go&quot;&gt;AppleStoreApi.go&lt;/a&gt;. At the top of module, we have some structs defined.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
type AppConnectUsers = struct {
	Data  &amp;#91;]Datum              `json:&quot;data&quot;`
	Links AppConnectUsersLinks `json:&quot;links&quot;`
}

type Datum = struct {
	Type       string     `json:&quot;type&quot;`
	Attributes Attributes `json:&quot;attributes&quot;`
}

type Attributes = struct {
	Username  string   `json:&quot;username&quot;`
	FirstName string   `json:&quot;firstName&quot;`
	LastName  string   `json:&quot;lastName&quot;`
	Roles     &amp;#91;]string `json:&quot;roles&quot;`
}

type AppConnectUsersLinks = struct {
	Self string `json:&quot;self&quot;`
	Next string `json:&quot;next&quot;`
}

type AppConnectErrors struct {
	Errors &amp;#91;]struct {
		Status string `json:&quot;status&quot;`
		Code   string `json:&quot;code&quot;`
		Title  string `json:&quot;title&quot;`
		Detail string `json:&quot;detail&quot;`
	} `json:&quot;errors&quot;`
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The AppConnectUsers, Datum, Attributes, and AppConnectUsersLinks structs define the JSON data that is returned by the List Users API call. If you look back at &lt;a href=&quot;https://rajapet.com/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/&quot;&gt;Part 1&lt;/a&gt;, the JSON document returned by List Users has a lot more in it. We only need to define structs to use the data members that we actually care about. Since this is a read only API call, we can let Unmarshall deserialize only the fields that we will use and it will discard the rest.&lt;/p&gt;

&lt;p&gt;We have a second object called AppConnectErrors, with a very different structure. If the API call fails from something happening on Apple’s end, the API will send back a very different JSON document. The following is an example of the JSON that Apple sends back when the API is not available:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;
{
	&quot;errors&quot;: &amp;#91;{
		&quot;status&quot;: &quot;500&quot;,
		&quot;code&quot;: &quot;UNEXPECTED_ERROR&quot;,
		&quot;title&quot;: &quot;An unexpected error occurred.&quot;,
		&quot;detail&quot;: &quot;An unexpected error occurred on the server side. If this issue continues, contact us at https://developer.apple.com/contact/.&quot;
	}]
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll cover how to handle that error data later on. The CheckUserList method has a lot going on so we’ll do this in parts.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
func CheckUserList(config *ConfigSettings, Username string) {
	token, err := CreateAppleJWT(config)
	if err != nil {
		fmt.Println(err)
	}

	client := &amp;amp;http.Client{}

	var nextUrl string = &quot;https://api.appstoreconnect.apple.com/v1/users?limit=100&quot;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first thing is that we call CreateAppleJWT in AppleJWT.go to create the signed JWT. Now we’ll jump into that.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
func CreateAppleJWT(settings *ConfigSettings) (string, error) {
	bytes, err := ioutil.ReadFile(settings.PrivateKeyFile)

	if err != nil {
		fmt.Println(err)
	}

	x509Encoded, _ := pem.Decode(bytes)

	parsedKey, err := x509.ParsePKCS8PrivateKey(x509Encoded.Bytes)

	if err != nil {
		log.Fatal(err)
	}

	ecdsaPrivateKey, ok := parsedKey.(*ecdsa.PrivateKey)

	if !ok {
		panic(&quot;not ecdsa private key&quot;)
	}

	token := jwt.NewWithClaims(jwt.SigningMethodES256, jwt.MapClaims{
		&quot;iss&quot;: settings.IssuerID,
		&quot;exp&quot;: time.Now().Add(time.Minute * 20).Unix(),
		&quot;aud&quot;: &quot;appstoreconnect-v1&quot;,
	})

	token.Header&amp;#91;&quot;kid&quot;] = settings.KeyID

	tokenString, err := token.SignedString(ecdsaPrivateKey)

	if err != nil {
		log.Fatal(err)
	}

	return tokenString, nil
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At line 2, we read the private key file. Lines 8 through 16 parse the PEM data and come out with the private key in a format that we can use for signing. At line 22, we create the token with an expiration timestamp of &lt;a href=&quot;https://tenor.com/view/random-weird-reaction-max-headroom-gif-13720275&quot;&gt;20 minutes into the future&lt;/a&gt;. We set the token header kid field to our KeyID. We sign the token at line 30 with our private key and pass it back. Getting the token signed correctly was the hardest part of writing this code. Getting back to CheckUserList…&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
client := &amp;amp;http.Client{}

var nextUrl string = &quot;https://api.appstoreconnect.apple.com/v1/users?limit=100&quot;

var FoundMatch = false

for {
	req, err := http.NewRequest(&quot;GET&quot;, nextUrl, nil)
	if err != nil {
		fmt.Print(err.Error())
		os.Exit(3)
	}

	req.Header.Add(&quot;Authorization&quot;, &quot;Bearer &quot;+token)

	resp, err := client.Do(req)
	if err != nil {
		log.Println(&quot;Error on response.\n&amp;#91;ERROR] -&quot;, err)
		os.Exit(3)
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(&quot;Error while reading the response bytes:&quot;, err)
		os.Exit(3)
	}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We start with a new instance of an &lt;a href=&quot;https://pkg.go.dev/net/http#pkg-overview&quot;&gt;http&lt;/a&gt; Client. We initialize nextUrl with the initial API url. And we set FoundMatch to false. Now we start looping. At line 8, we new up a new request and add our token at line 14. Line 16 is where we call the API and we wait at line 22 to get the response back.&lt;/p&gt;

&lt;p&gt;We read the entire body into a byte array at line 24. Now we can start with the parsing. The first thing to do is see if the API returned an error document instead of the list of users.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
var appConnectErrors AppConnectErrors
err = json.Unmarshal(body, &amp;amp;appConnectErrors)
if err != nil {
	log.Println(&quot;Error while deserializing the response bytes:&quot;, err)
	os.Exit(3)
}

// If there is an error object in the body, print it and exit
if len(appConnectErrors.Errors) &amp;gt; 0 {
	firstError := appConnectErrors.Errors&amp;#91;0]
	log.Println(&quot;Status:&quot;, firstError.Status)
	log.Println(&quot;Error accessing API:&quot;, firstError.Detail)
	os.Exit(4)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We new up an instance the AppConnectError struct as appConnectErrors. Then we unmarshal the body into appConnectErrors. Next we check the length of the Errors array In appConnectErrors. If the API returns users, the Errors object will not be there and the length will be 0.&lt;/p&gt;

&lt;p&gt;If the length of Errors is greater than 0, then “&lt;a href=&quot;https://tenor.com/4V3j.gif&quot;&gt;Houston, we have a problem&lt;/a&gt;“. While Errors is an array and could have more than one error, we don’t care about anything after the first error. So we get the first (and probably only) error. Then we log the error status, which will be a numeric code, and the full text message. And then we die with an error code of 4.&lt;/p&gt;

&lt;p&gt;Otherwise we keep going…&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
var appConnectUsers AppConnectUsers

err = json.Unmarshal(body, &amp;amp;appConnectUsers)
if err != nil {
	log.Println(&quot;Error while deserializing the response bytes:&quot;, err)
	os.Exit(3)
}

for _, s := range appConnectUsers.Data {
	FoundMatch = strings.EqualFold(s.Attributes.Username, Username)

	if FoundMatch {
		fmt.Printf(&quot;Found %s, %s %s, %s\n&quot;,
			s.Attributes.Username,
			s.Attributes.FirstName,
			s.Attributes.LastName,
			strings.Join(s.Attributes.Roles, &quot;, &quot;))
		break
	}
}

if FoundMatch {
	break
}

nextUrl = appConnectUsers.Links.Next

if len(nextUrl) == 0 {
	break
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As with the error struct, we new up a AppConnectUsers struct named appConnectUsers. We unmarshal the JSON data into the struct. At line 9, we iterate through the list of users stored in the Data array. We set FoundMatch at line 10 to true if the username matches. If we have a match, we print that match to the console and use break to exit the for..range loop&lt;/p&gt;

&lt;p&gt;Next we break out of the forever loop if we have a match. Otherwise we check to see if we have a next link. If we do, we keep looping, otherwise we are done looping. And we end with an message if we didn’t have a match. &lt;/p&gt;

&lt;p&gt;If you cloned the code from the repo and created your own config file (refer back to &lt;a href=&quot;https://rajapet.com/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/&quot;&gt;Part 1&lt;/a&gt; for that part), you can now compile and run the code. You would compile the applet from your terminal of choice with the following command:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
go build .
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want the smallest executable, build it with the following options:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
go build -ldflags=&quot;-s -w&quot; .
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then you can compress the resulting executable with a tool like &lt;a href=&quot;https://upx.github.io/&quot;&gt;upx&lt;/a&gt;. You would need to run IsUserInApple with a required command line parameter, the email to look for. If you leave it out, you will get an error message telling you what is needed. Remember that the IsUserInApple.json file needs to be in the same folder as the executable if you don’t use the second optional command line parameter that will let you specify the name of the config file.&lt;/p&gt;

&lt;p&gt;If you are running it with the go command, you would run it as&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
go run . -username &quot;some.email@company.com&quot;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
go run . -username &quot;some.email@company.com&quot; -config &quot;IsUserInApple.json&quot;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you are running it as the compiled executable, you would run it as &lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
IsUserInApple -username &quot;some.email@company.com
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’ll back something like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
Looking for some.email@company.com
Found some.email@company.com, Some Email, APP_MANAGER
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or….&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
Looking for some.email@company.com
No match for some.email@company.com
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the rare situation that the API is not available and Apple returns an error document, you’ll see something like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
Looking for some.email@company.com
2021/07/13 23:26:19 Status: 500
2021/07/13 23:26:19 Error accessing API: An unexpected error occurred on the server side. If this issue continues, contact us at https://developer.apple.com/contact/.
exit status 4
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you run it without  the -username parameter or pass is “-h” or “–help”, you will get back the usuage help messages&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
go run .                                                                  
Please specify an email address to match (in quotes)
  -config string
        Configuration file (default &quot;./IsUserInApple.json&quot;)
  -username string
        Username to find (in quotes)

go run . -h
Usage of C:\Users\anoth\AppData\Local\Temp\go-build2936985627\b001\exe\IsUserInApple.exe:
  -config string
        Configuration file (default &quot;./IsUserInApple.json&quot;)
  -username string
        Username to find (in quotes)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That wraps up this series. You can do more than get the team list from the &lt;a href=&quot;https://developer.apple.com/documentation/appstoreconnectapi&quot;&gt;App Connect API&lt;/a&gt;. For example, if you want to track how many devices have been provisioned, there is a Devices API. Lots of access points for DevOps functionality.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Apple" /><category term="Apple" /><category term="C#" /><category term="Go" /><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">How to access Apple’s App Connect API from C#, Python, and Go. – Part 2</title><link href="http://localhost:4000/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2/" rel="alternate" type="text/html" title="How to access Apple’s App Connect API from C#, Python, and Go. – Part 2" /><published>2021-07-12T09:02:52-04:00</published><updated>2021-07-12T09:02:52-04:00</updated><id>http://localhost:4000/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2</id><content type="html" xml:base="http://localhost:4000/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2/">&lt;div class=&quot;wp-block-image&quot;&gt;
  &lt;figure class=&quot;aligncenter size-large is-resized&quot;&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://i1.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-rMG2ZL4/0/c712e41f/L/Apple%20Lock%20Green-L.jpg?resize=680%2C510&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;510&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In my &lt;a href=&quot;https://rajapet.com/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/&quot;&gt;previous post&lt;/a&gt;, I wrote about a need to query my company’s membership list from our Apple app store development account. In that post, I used C# to query Apple’s API.  In this installment, we’ll cover how to accomplish the same task with Python.  The &lt;a href=&quot;https://rajapet.com/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3/&quot;&gt;final post&lt;/a&gt; will cover a Go version.&lt;/p&gt;

&lt;p&gt;As with the C# version, we’ll need to create a signed Javascript Web Token (JWT) and then make some API calls.  As with the C# version, I have the code in a Github repository. You can clone it from &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-python&quot;&gt;here&lt;/a&gt;. The code is in a script named &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-python/blob/main/IsUserInApple.py&quot;&gt;IsUserInApple.py&lt;/a&gt;. You can name your script anything that the OS and Python allows, I’ll be referring to my script as IsUserInApple.py.&lt;/p&gt;

&lt;p&gt;I wrote the code using Python 3, version 3.9.2. Unless you are running Windows, the odds are that you have Python 3 installed. If not, you can get it from the good people at &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;python.org&lt;/a&gt;. This code should work on any platform that supports Python 3. It should also work (potentially with some changes) with Python 2, but I haven’t tested that. &lt;/p&gt;

&lt;p&gt;This script will use a couple of libraries that you will need to install. To make the HTTPS web requests, we’ll be using the &lt;a href=&quot;https://docs.python-requests.org/en/master/&quot;&gt;Requests&lt;/a&gt; library. It &lt;a href=&quot;https://youtu.be/OkGaq9xiQZY&quot;&gt;does exactly what it says on the tin&lt;/a&gt;, “Requests is an elegant and simple HTTP library for Python, built for human beings”. It makes the code for calling Apple’ API simple and easy to follow.&lt;/p&gt;

&lt;p&gt;The other library is &lt;a href=&quot;https://docs.authlib.org/en/stable/&quot;&gt;Authlib&lt;/a&gt;, a library for working with OAuth and OpenID Connect. It has everything we need to &lt;a href=&quot;https://docs.authlib.org/en/stable/jose/jwt.html&quot;&gt;create and sign our JWT&lt;/a&gt;.  While we need to install all of Authlib, we’ll only being using the jwt module.  To install the libraries, you just need to run the pip command like this:&lt;/p&gt;

&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;pip install requests authlib&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are not familar with pip. it’s the package manager for Python and will be installed when you install Python. If you already have Python installed, then you already have pip installed.&lt;/p&gt;

&lt;p&gt;In the folder that you will have the Python script, you will need a configuration file. It performs the same function as the IsUserInApple.json file did in the C# code. It will contain the path to your private key file, the key id, and the issuer id for your account. Please refer back to &lt;a href=&quot;https://rajapet.com/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/&quot;&gt;Part 1&lt;/a&gt; for how to define these values. Instead of using JSON, I used a simple key/value file and it’s named IsUserInApple.config. It should use the following format:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: bash; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;#91;settings]
private_key = c:/scripts/AuthKey.p8
KEY_ID = ABCDEF1234
ISSUER_ID = d88b7c23-4c26-48fb-9d62-5649f27a25a2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can go through the code. I’m going to jump around a bit, you may want to have &lt;a href=&quot;https://github.com/anotherlab/IsUserInApple-python/blob/main/IsUserInApple.py&quot;&gt;the script&lt;/a&gt; open in another window. After some comments, we start with the following lines:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
import requests, time, json, sys, tempfile, os, configparser
from authlib.jose import jwt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first line imports the libraries that we’ll need. The requests library was the 3rd party library that we installed via pip, the rest are libraries included with Python. The next line imports the jwt model from the authlib.jose library. The “jose” part of the library name is an acronym for &lt;strong&gt;J&lt;/strong&gt;avascript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;S&lt;/strong&gt;igning and &lt;strong&gt;E&lt;/strong&gt;ncryption.&lt;/p&gt;

&lt;p&gt;The next part of the code are the methods we’ll define and use to call the API. We’ll dive into them in a bit. For now, we’ll jump down to the bottom of the script.  We start with&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
if len(sys.argv) &amp;gt; 1:
    config = configparser.ConfigParser()
    try:
        configPath = os.path.dirname(os.path.abspath(__file__)) + &quot;/IsUserInApple.config&quot;
        config.read(configPath)
    except Exception as e :
        print(str(e))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Line 1 is saying “if we have at least one command line parameter after the name of the script…”. The next line creates an instance of the &lt;a href=&quot;https://docs.python.org/3/library/configparser.html&quot;&gt;ConfigParser&lt;/a&gt; class, which will allow us to easily read contents from the IsUserInApple.config configuation file. Starting at line 3, we’ll use a try/except block to read the config file. We want to read the config file from the same folder as the script. To get that folder name, we call the &lt;a href=&quot;https://docs.python.org/3/library/os.path.html?highlight=abspath#os.path.abspath&quot;&gt;abspath&lt;/a&gt; method on the __file__ variable. The __file__variable is a “&lt;a href=&quot;https://www.geeksforgeeks.org/dunder-magic-methods-python/&quot;&gt;dunder&lt;/a&gt;” variable in Python and represents the name of the currently running module. &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#special-method-names&quot;&gt;A list of dunder variables&lt;/a&gt; can be found in the Python Docs. The &lt;a href=&quot;https://docs.python.org/3/library/os.path.html#os.path.dirname&quot;&gt;dirname&lt;/a&gt; method will return the folder part of the file name and then we concatenate that with the name of the config file. And at line 5, we read the config file.&lt;/p&gt;

&lt;p&gt;Next, we read the settings into variables with the following code. It’s pretty much self explanatory.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
try:
    private_key = config&amp;#91;'settings']&amp;#91;'private_key']    
    KEY_ID = config&amp;#91;'settings']&amp;#91;'KEY_ID']    
    ISSUER_ID = config&amp;#91;'settings']&amp;#91;'ISSUER_ID']    
except Exception as e :
    print(str(e))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, we have the following code:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
if not os.path.isfile(private_key):
    sys.exit(&quot;Error missing private key file for JWT&quot;)

UserEmail = sys.argv&amp;#91;1].lower()

print('Looking for a match on ' + UserEmail)

token = getToken(KEY_ID, ISSUER_ID, private_key)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First we check to see if the value provided for private_key is actually a file. Then we set UserEmail to the command line parameter (while converting it to lowercase) and echo that back to the shell. The last line is where we call our getToken method in the script to generate the signed JWT. Now, we’ll jump to that getToken method.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
def getToken(KEY_ID, ISSUER_ID, PATH_TO_KEY):
    EXPIRATION_TIME = int(round(time.time() + (20.0 * 60.0))) # 20 minutes timestamp

    with open(PATH_TO_KEY, 'r') as f:
        PRIVATE_KEY = f.read()

    header = {
        &quot;alg&quot;: &quot;ES256&quot;,
        &quot;kid&quot;: KEY_ID,
        &quot;typ&quot;: &quot;JWT&quot;
    }

    payload = {
        &quot;iss&quot;: ISSUER_ID,
        &quot;exp&quot;: EXPIRATION_TIME,
        &quot;aud&quot;: &quot;appstoreconnect-v1&quot;
    }

    # Create and return the JWT
    return jwt.encode(header, payload, PRIVATE_KEY)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Line 1 defines the name of the method and the parameter names. &lt;a href=&quot;https://tenor.com/EVNQ.gif&quot;&gt;No big whoop&lt;/a&gt;. Line 2 generates the expiration time, &lt;a href=&quot;https://youtu.be/8Y7McIX_m-I&quot;&gt;20 minutes into the future&lt;/a&gt;. At line 4, we read in the private key file. The jwt module &lt;a href=&quot;https://efangelist.wordpress.com/2014/07/29/why-smart-young-people-grok-the-word-grok-do-you-grok-grok/&quot;&gt;groks&lt;/a&gt; the PEM format, we don’t have to clean it up like &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet/blob/main/Program.cs#L79&quot;&gt;we did in the C# code&lt;/a&gt;. Then line 7 creates the header and line 13 creates the payload. This is nearly identical to the code from the C# version. At line 20, we create and sign the JWT and return to the code that called it. It follows the same logic as the code in the GetToken method from &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet/blob/main/AppleJWT.cs&quot;&gt;AppleJWT.cs&lt;/a&gt;. Jumping back to where we called getTokem, we have the following line:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
members = getAllUsers(token)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we’ll dive into the getAllUsers method.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
def getAllUsers(token):
    JWT = 'Bearer ' + token.decode()
    URL = 'https://api.appstoreconnect.apple.com/v1/users?limit=100'
    HEAD = {'Authorization': JWT}

    teamMembers = &amp;#91;]

    nextURL = URL
    keepGoing = True

    while keepGoing:
        r = requests.get(nextURL, params={}, headers=HEAD)

        y = r.json()

        if 'errors' in y:
            errorCode = y&amp;#91;'errors']&amp;#91;0]
            print('Apple returned an HTTP ' + errorCode&amp;#91;'status'] + ' code')
            print(errorCode&amp;#91;'detail'])
            sys.exit('whoops')

        for i in y&amp;#91;'data']:
            teamMembers.append({'username':i&amp;#91;'attributes']&amp;#91;'username'].lower(), 'roles': ','.join(i&amp;#91;'attributes']&amp;#91;'roles'])})

        if 'next' in y&amp;#91;'links']:
            nextURL = y&amp;#91;'links']&amp;#91;'next']
        else:
             keepGoing = False

    return teamMembers
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Line 1 defines the method name and parameters. Lines 2-4 sets the &lt;a href=&quot;https://swagger.io/docs/specification/authentication/bearer-authentication/&quot;&gt;bearer (token) authorization&lt;/a&gt; and the inital URL to call. The next few lines just initialize a few variables and the fun begins at line 11 where we’ll loop until we are done. At line 12, we use the requests library to make a HTTPS get call. Line 14 assigns the JSON results to our Y variable. The next block of code checks the JSON document for “errors”. If Apple’s API falls down, it will fall down this way.&lt;/p&gt;

&lt;p&gt;If there are no errors, we just walk through the “data” member of JSON document and add the username and roles for each user to the teamMembers array. When we append the username, we convert it to lowercase. That was we don’t have to worry about case when we match on the email address. Then we check the see if the “links” member of the document has a field named “next”. If it does, we use that as the new URL and keep looping. When we don’t have a “next” url, we return the teamMembers array to caller. That takes us back to the bottom of our script again.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: python; title: ; notranslate&quot; title=&quot;&quot;&gt;
    for i in members:
        if i&amp;#91;'username'] == UserEmail:
            HasMatch = True
            print('Match on ' + i&amp;#91;'username'] + ', Roles: ' + i&amp;#91;'roles'])

    if HasMatch == False:
        print('No match')

else:
    sys.exit(&quot;Error: Please specify an email address&quot;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we just iterate through the members array and see if the user name matches. We report back on whether we foiund it or not.  The last lines are the error message that would be reported if you ran the script without a email address to match on.&lt;/p&gt;

&lt;p&gt;That’s basically all there is to this script. This version doesn’t deserialize the JSON data into objects, it just parses it as is. It’s a trade off. Doing it this way uses less code, but you lose some of the discoverability of having the data in object form.&lt;/p&gt;

&lt;p&gt;To run it, you would just do something like:&lt;/p&gt;

&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;python IsUserInApple.py some.email@company.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll either the following if that use is a member of the account:&lt;/p&gt;

&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Looking for a match on some.email@company.com
Match on some.email@company.com, Roles: ADMIN,ACCOUNT_HOLDER&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the following if that email doesn’t provide a match&lt;/p&gt;

&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Looking for a match on some.email@company.com
No match&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Coming up next will be the Go version of this script.&lt;/p&gt;

&lt;hr class=&quot;wp-block-separator&quot; /&gt;

&lt;p class=&quot;has-small-font-size&quot;&gt;
  &lt;em data-rich-text-format-boundary=&quot;true&quot;&gt;About the image: &lt;br data-rich-text-line-break=&quot;true&quot; /&gt;This image was derived from some open-source images.&amp;nbsp;The image of the wall comes from &lt;a href=&quot;https://unsplash.com/@impatrickt&quot;&gt;Patrick Tomasso via Unsplash&lt;/a&gt;.&amp;nbsp;The Apple lock logo comes from Apple, which retains all rights to its artwork. The people icon was created by &lt;a href=&quot;https://thenounproject.com/search/?q=people&amp;amp;i=165313&quot;&gt;Monika from the Noun Project&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Apple" /><category term="Apple" /><category term="C#" /><category term="Go" /><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">How to access Apple’s App Connect API from C#, Python, and Go. – Part 1</title><link href="http://localhost:4000/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/" rel="alternate" type="text/html" title="How to access Apple’s App Connect API from C#, Python, and Go. – Part 1" /><published>2021-07-09T20:04:41-04:00</published><updated>2021-07-09T20:04:41-04:00</updated><id>http://localhost:4000/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1</id><content type="html" xml:base="http://localhost:4000/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium&quot; src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-CrcmsQz/0/311d8c2f/L/Apple%20Lock-L.jpg?resize=680%2C510&amp;#038;ssl=1&quot; width=&quot;680&quot; height=&quot;510&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the &lt;a href=&quot;https://developer.apple.com/support/roles/&quot;&gt;Account Holder&lt;/a&gt; for my employer’s Apple App Store account, I get to keep track of who has access to the account. Apple does not do federated logins. Which means no linkage between our Active Directory store and the user accounts associated with the App Store account.&lt;/p&gt;

&lt;p&gt;So if someone leaves our company, their Apple Dev account stays active on our team account until we go in and manually remove it. When you have thousands of employees, there’s no way for a developer like me to know who has left the company. And I shouldn’t know that, that’s why we have HR to manage those resources and IT to handle the offboarding.&lt;/p&gt;

&lt;p&gt;To make it easier for IT to manage this, I wrote an applet that they could run to see if an employee had an account on on our App Store team. They have a limited API that you can query to get information about your apps and team members. Basically you run that applet and pass in the email address of the employee. It will come back and tell you if that address is a member of the account. &lt;/p&gt;

&lt;p&gt;I had written code in C# that I would run from &lt;a href=&quot;https://www.linqpad.net/&quot;&gt;LINQpad&lt;/a&gt; to query various App Connect Services in an ad-hoc manner. I made a stand alone version for our IT department and then realized they would need to have the .NET Framework installed. So I decide to port the functionality to Python and Go (aka “Golang”). Installing the Python runtime is easy and with Go, I can just create a single executable. I’m going to split this blog post into 3 parts, each part covering a different language. This will be the C# version. &lt;a href=&quot;https://rajapet.com/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2/&quot;&gt;Part 2&lt;/a&gt; covers Python. The final post in the series, &lt;a href=&quot;https://rajapet.com/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3/&quot;&gt;Part 3&lt;/a&gt;, covers a Go implementation..&lt;/p&gt;

&lt;p&gt;This version of the applet was written for .NET 5. I wrote and tested the code with Windows 10, but it should compile and run under Linux and MacOS as long as the &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet/5.0&quot;&gt;.NET 5 SDK&lt;/a&gt; has been installed. All of the source code can be cloned from &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet&quot;&gt;this repository&lt;/a&gt; on Github.&lt;/p&gt;

&lt;p&gt;To query Apple for information about your development account, you need to use their App Store Connect API. It’s more or less (I’ve cover that in a bit) documented &lt;a href=&quot;https://developer.apple.com/app-store-connect/api/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To authenticate to their API, you’ll need to generate a signed &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON_Web_Token&quot;&gt;JSON Web Token&lt;/a&gt; (JWT). You’ll sign the key with a private key that will be generated on Apple’s site. They’ll hold the public key, you’ll have the private key. This is managed from Apple’s API portal and you can revoke a private key at any time.&lt;/p&gt;

&lt;p&gt;You’ll need to generate an API key through your App Store Connect account. The JWT needs to be signed with that key or Apple will reject it.&lt;/p&gt;

&lt;p&gt;It’s pretty easy to generate a key. Apple lists the steps here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to &lt;a href=&quot;https://appstoreconnect.apple.com&quot;&gt;App Store Connect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Users and Access&lt;/strong&gt;, and then select the &lt;strong&gt;API Keys&lt;/strong&gt; tab.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Generate API Key&lt;/strong&gt; or the Add (+) button.&lt;/li&gt;
  &lt;li&gt;Enter a name for the key. &lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Access&lt;/strong&gt;, select the role for the key.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Generate&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll be able to download the API private key once as a .p8 file, Apple does not store your private key. You’ll want to store it securely. If you lose it, you’ll have to revoke it and generate a new one.&lt;/p&gt;

&lt;p&gt;The API call that we want is &lt;a href=&quot;https://developer.apple.com/documentation/appstoreconnectapi/list_users&quot;&gt;List Users&lt;/a&gt;. List Users will return all of the users along with their associated metadata. By default, it will the first 100 users, you can increase that up to 200 with the limit parameter. If there are more users than can be supplied in the request, the payload will include a link to get the next set of records. You would keep calling the “next set” URL until it stops including a “next set” URL. &lt;/p&gt;

&lt;p&gt;The JSON shown below is a subset of a fake result set that could be returned by a call to List Users. You get a set of users and the information that we need are fields in the “attributes” object, highlighted below:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: jscript; auto-links: false; highlight: [6,7,8,9]; title: ; quick-code: false; notranslate&quot; title=&quot;&quot;&gt;
{
  &quot;data&quot; : &amp;#91; {
    &quot;type&quot; : &quot;users&quot;,
    &quot;id&quot; : &quot;bded051a-7566-4b5f-a7a9-2e461e51eab0&quot;,
    &quot;attributes&quot; : {
      &quot;username&quot; : &quot;smithj@fake.com&quot;,
      &quot;firstName&quot; : &quot;John&quot;,
      &quot;lastName&quot; : &quot;Smith&quot;,
      &quot;roles&quot; : &amp;#91; &quot;APP_MANAGER&quot; ],
      &quot;allAppsVisible&quot; : false,
      &quot;provisioningAllowed&quot; : true
    },
    &quot;relationships&quot; : {
      &quot;visibleApps&quot; : {
        &quot;links&quot; : {
          &quot;self&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users/bded051a-7566-4b5f-a7a9-2e461e51eab0/relationships/visibleApps&quot;,
          &quot;related&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users/bded051a-7566-4b5f-a7a9-2e461e51eab0/visibleApps&quot;
        }
      }
    },
    &quot;links&quot; : {
      &quot;self&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users/bded051a-7566-4b5f-a7a9-2e461e51eab0&quot;
    }
  } ],
  &quot;links&quot; : {
    &quot;self&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users?limit=50&quot;,
    &quot;next&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users?cursor=SomeHideousToken&amp;amp;limit=50&quot;
  },
  &quot;meta&quot; : {
    &quot;paging&quot; : {
      &quot;total&quot; : 150,
      &quot;limit&quot; : 50
    }
  }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For our purposes, we only care about the email address. We walk through the JSON and just add the address to a list. If there is a “next set” URL, we call that to get the next set of addresses. Then we can compare those emails with the email addresses of the former employees to see which accounts will need to be removed.&lt;/p&gt;

&lt;p&gt;This “Next” set URL really isn’t documented as part of the API call. This caused me a fair amount of angst. The API documentation states that the maximum number of users returned will be 200. We have 150+ on the team and I converned about what would happen when we passed 200 members. I emailed Apple Support and was told that API works and I would get all of the members. But they didn’t mention how.&lt;/p&gt;

&lt;p&gt;I did some searching in Apple’s forums and the &lt;a href=&quot;https://developer.apple.com/forums/thread/652124?answerId=617380022#617380022&quot;&gt;solution was simple and logical&lt;/a&gt;. In the JSON result set, there is “links” object. The links object will have a “self” field that contains the URL that was used to make the call. It can have an optional “next” field that will contain a URL that will return the next set of data. When you call the API, you will need to check the “next” field and call that URL until you no longer receive another “next” field in the JSON result set. &lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: jscript; auto-links: false; highlight: [3]; title: ; quick-code: false; notranslate&quot; title=&quot;&quot;&gt;
&quot;links&quot; : {
    &quot;self&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users?limit=50&quot;,
    &quot;next&quot; : &quot;https://api.appstoreconnect.apple.com/v1/users?cursor=SomeHideousToken&amp;amp;limit=50&quot;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Depending on your needs, you can either parse the data in each set or combine it into one set. It (hint) should documented in a way that would be easier to discover. So getting back to the data, we want the “username” from the “attributes” object. The name and role data is nice to have, so we’ll grab it.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: jscript; auto-links: false; highlight: [2,3,4,5]; title: ; quick-code: false; notranslate&quot; title=&quot;&quot;&gt;
&quot;attributes&quot; : {
  &quot;username&quot; : &quot;smithj@fake.com&quot;,
  &quot;firstName&quot; : &quot;John&quot;,
  &quot;lastName&quot; : &quot;Smith&quot;,
  &quot;roles&quot; : &amp;#91; &quot;APP_MANAGER&quot; ],
  &quot;allAppsVisible&quot; : false,
  &quot;provisioningAllowed&quot; : true
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The actual API key data is stored in a separate file that I created named IsUserinApple.json. It will contain the path to your private key file, the key id, and the issuer id for your account. It will look something like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: jscript; auto-links: false; title: ; quick-code: false; notranslate&quot; title=&quot;&quot;&gt;
{
    &quot;PrivateKeyFile&quot;: &quot;path/to.your/privatekey.p8&quot;,
    &quot;KeyID&quot;: &quot;ABCDEF1234&quot;,
    &quot;IssuerID&quot;: &quot;d88b7c23-4c26-48fb-9d62-5649f27a25a2&quot;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That file will not be in the repo, you’ll have to create that one yourself. To get the data, we need to make the API call. We need to pass in a signed JWT. This will be the heaviest lifting for the code. There are three steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the JWT header&lt;/li&gt;
  &lt;li&gt;Create the JWT payload&lt;/li&gt;
  &lt;li&gt;Sign the JWT&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the .NET version, we are going to use a nuget package, &lt;a href=&quot;https://github.com/dvsekhvalnov/jose-jwt&quot;&gt;jose-jwt&lt;/a&gt;, to create and sign the JWT. In the repo for this version of the applet, the code for generated the signed JWT is &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet/blob/main/AppleJWT.cs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AppleJWT.cs&lt;/a&gt;. The full method is short and we can quickly go over what it does here.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; highlight: [11,12,13,14,15,16,19,21,22,23,24,25,26,29,32]; title: ; notranslate&quot; title=&quot;&quot;&gt;
/// &amp;lt;summary&amp;gt;
/// Returns a signed JSON Web Token
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;keyId&quot;&amp;gt;Your private key ID from App Store Connect&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;issuerID&quot;&amp;gt;Your issuer ID from the API Keys page in App Store Connect&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;privateKey&quot;&amp;gt;The private that was generated by Apple, encoded as Base64&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;Signed JWT&amp;lt;/returns&amp;gt;
public string GetToken(string keyId, string issuerID, string privateKey)
{
    // Create the header
    var header = new Dictionary&amp;lt;string, object&amp;gt;()
    {
        {&quot;alg&quot;, &quot;ES256&quot;},
        {&quot;kid&quot;, keyId},
        {&quot;typ&quot;, &quot;JWT&quot;},
    };

    // Create the payload
    var exp = Math.Round((DateTime.UtcNow.AddMinutes(30) - new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds, 0);

    var payload = new Dictionary&amp;lt;string, object&amp;gt;()
    {
        {&quot;aud&quot;, &quot;appstoreconnect-v1&quot;},
        { &quot;exp&quot;, exp },
        { &quot;iss&quot;, issuerID }
    };

    // Generate the signing key from the private that has been given to us
    CngKey key = CngKey.Import(Convert.FromBase64String(privateKey), CngKeyBlobFormat.Pkcs8PrivateBlob);
    
    // Generate the signed token
    string token = Jose.JWT.Encode(payload, key, JwsAlgorithm.ES256, header);

    return token;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lines 11-16 create the header. We set the expiration date at line 19 to 30 minutes into the future with the “exp” field. The issuer ID at line 25 comes from your account in App Store Connect. Apple’s instructions for getting the issuer ID are fairly easy to follow: log in to &lt;a href=&quot;https://appstoreconnect.apple.com/&quot;&gt;App Store Connect&lt;/a&gt; and: &lt;a href=&quot;https://appstoreconnect.apple.com/access/users&quot;&gt;Select Users and Access&lt;/a&gt;, then Select the &lt;a href=&quot;https://appstoreconnect.apple.com/access/api&quot;&gt;API Keys&lt;/a&gt; tab. The issuer ID appears near the top of the page. To copy the issuer ID, click Copy next to the ID. The key ID will also come from that page. It will be the key that we described how to create earlier.&lt;/p&gt;

&lt;div class=&quot;wp-block-image&quot;&gt;
  &lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-4scN9mR/0/8d4a88a7/M/App%20Store%20Connect%20Keys-M.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;figcaption&gt;The ID values that you will need&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The private key will come from the contents of the .p8 file that you downloaded when you created the API key. The .p8 file will have your private key in PEM format. We generate the signing key from the private key at line 29 and then generate a JWT and sign it with that key at line 32.&lt;/p&gt;

&lt;p&gt;There is some code in &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet/blob/main/Program.cs&quot;&gt;program.cs&lt;/a&gt; to read the PEM data in the .p8 file and return just the private key needed to sign the JWT. The .p8 file will contain something vaguely like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;
-----BEGIN PRIVATE KEY-----
mfykFJXw6fZBxYR4GYDGKyF27GfFaedt4tvR0jACGwUJxBR2t83wZQZOtoj6PMPC
seSrR0XXVWhEzImSXtLfF8JCyHrvpknEgOzSvqD040LUOvgNrnMvrGQHmPGQwmta
So6GaxJuCk0XxJa2t9mjfu5ERvPCIVwQPgeqcVrroNx2qaXzBteLsyonXOPRxo2w
VnPiPup3
-----END PRIVATE KEY-----
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our code needs only what exists between the “BEGIN” and “END” lines. So this code just strips all of that out&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;
private string GetPrivateKey(ConfigSettings configSettings)
{
    var certPEM = File.ReadAllText(configSettings.PrivateKeyFile);

    return certPEM
    .Replace(&quot;-----BEGIN PRIVATE KEY-----&quot;, &quot;&quot;)
    .Replace(&quot;\n&quot;, &quot;&quot;)
    .Replace(&quot;\r&quot;, &quot;&quot;)
    .Replace(&quot;-----END PRIVATE KEY-----&quot;, &quot;&quot;);
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have a signed JWT, we can make the API calls. In &lt;a href=&quot;https://github.com/anotherlab/IsUserinApple-dotnet/blob/main/AppStoreApi.cs&quot;&gt;AppStoreApi.cs&lt;/a&gt;, there is a simple wrapper for the List User API call. This unit has a fair amount of code that provides C# models of the JSON data. I used the tools at &lt;a href=&quot;https://app.quicktype.io/&quot;&gt;app.quicktype.io&lt;/a&gt; to generate the C# models from the JSON data. I wont repeat that code here, it’s all in repo. But we’ll review the highlights. We start off with by creating a descendant of &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-5.0&amp;amp;WT.mc_id=DT-MVP-5000200&quot;&gt;HttpClient&lt;/a&gt; that will be pass the signed JWT in the headers.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; highlight: [7]; title: ; notranslate&quot; title=&quot;&quot;&gt;
public HttpClient client {
    get {
        if (_client == null)
        {
            _client = new HttpClient();    
            _client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue(&quot;Bearer&quot;, token);
        }

        return _client;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll have a public method, FindUser. It will take an email address and return a user object. Or null, if it doesn’t find a match.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;
public User FindUser(string EmailAddress)
{
    var users = GetAllUsers();

    if (users != null)
    {
        var user = users.Where(s =&amp;gt; s.UserName.Equals(EmailAddress, StringComparison.CurrentCultureIgnoreCase)).FirstOrDefault();

        return user;
    }

    return null;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The API call comes in GetAllUsers().&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; highlight: [7,14,16,17,18,19,20,21,23]; title: ; notranslate&quot; title=&quot;&quot;&gt;
public List&amp;lt;User&amp;gt; GetAllUsers()
{
    List&amp;lt;User&amp;gt; users = new List&amp;lt;User&amp;gt;();

    // Find the first 100 users.  If there there are more than
    // 100 users, the &quot;Next&quot; property will contain the net URL to call
    var jsonString = GetUsers(100, null).Result;

    if (jsonString == null)
    {
        return null;
    }

    var appConnectUsers = AppConnectUsers.FromJson(jsonString);
    
    users.AddRange(appConnectUsers.Data
        .Select(s =&amp;gt; s.Attributes)
        .Select(s =&amp;gt; new User() {UserName = s.Username, 
                                    LastName = s.LastName, 
                                    FirstName = s.FirstName, 
                                    Roles = s.Roles.ToList()}) );
    
    while (appConnectUsers.Links.Next != null)
    {
        jsonString = GetUsers(100, appConnectUsers.Links.Next.ToString()).Result;
        appConnectUsers = AppConnectUsers.FromJson(jsonString);
        users.AddRange(appConnectUsers.Data
                .Select(s =&amp;gt; s.Attributes)
                .Select(s =&amp;gt; new User() { UserName = s.Username, 
                                        LastName = s.LastName, 
                                        FirstName = s.FirstName, 
                                        Roles = s.Roles.ToList() }));
    }

    return users;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;GetUsers is the call the App Connect API and will return a JSON result set. The FromJson method is some boilerplate code for deserializing the JSON. Then we use some &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.linq?view=net-5.0&amp;amp;WT.mc_id=DT-MVP-5000200&quot;&gt;LINQ&lt;/a&gt; code to iterate through the result and pull the fields from the attributes objects. Then we continue to call the API until we no longer have a Links.Next value.&lt;/p&gt;

&lt;p&gt;The GetUsers method is pretty straightforward.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: csharp; auto-links: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
private async Task&amp;lt;string&amp;gt; GetUsers(int count, string nextUrl)
{
    var url = nextUrl ?? $&quot;https://api.appstoreconnect.apple.com/v1/users?limit={count}&quot;;
        
    var result = await client.GetAsync(url);
    
    if (result.StatusCode == System.Net.HttpStatusCode.InternalServerError)
    {
        Console.WriteLine(result.StatusCode.ToString());
        return null;
    }
    else
    {
        var users = result.Content.ReadAsStringAsync();

        return users.Result;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We pass in null for nextUrl for a new search, otherwise it’s the url for the next set of data. 99.99% of the time you will get a result back. When Apple’s API is down (and I have seen it happen), you can get a 500 error and this code will catch.&lt;/p&gt;

&lt;p&gt;Assuming that you have the &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet/5.0&quot;&gt;.NET 5 SDK&lt;/a&gt; installed, you can just grab the code from the repo and then build it.  Executing “dotnet build” should pull down the required packages and the build the applet. If you are running it with the dotnet command, you would run it as &lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
dotnet run -- some.email@company.com
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If that email is a member of the account, the applet wiill come back with something line this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
Found user: some.email@company.com, Some Email &amp;#91;AppManager, Developer]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Otherwise something like this:&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot; title=&quot;&quot;&gt;
User: some.email@company.com not found
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s the core of the code. The rest of the code is some simple stuff for processing the command line parameters and loading the settings. It’s pretty basic stuff and commented in the repo. Our IT staff now uses a version of this code when they process an employee leaving the company. If that person’s email shows up, IT passes the email to me and I can remove that user from the account. We may look at ways to have the applet query the results from the App Connect API and then match all of the emails to see if they exist in our Active Directory. In the meantime, this works.&lt;/p&gt;

&lt;p&gt;Coming next will be the Python and Go versions of the code.&lt;/p&gt;

&lt;hr class=&quot;wp-block-separator&quot; /&gt;

&lt;p class=&quot;has-small-font-size&quot;&gt;
  &lt;em&gt;About the image: &lt;br /&gt;This image was derived from some open-source images.&amp;nbsp;The image of the wall comes from &lt;a href=&quot;https://unsplash.com/@impatrickt&quot;&gt;Patrick Tomasso via Unsplash&lt;/a&gt;.&amp;nbsp;The Apple lock logo comes from Apple, which retains all rights to its artwork. The people icon was created by &lt;a href=&quot;https://thenounproject.com/search/?q=people&amp;amp;i=165313&quot;&gt;Monika from the Noun Project&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Apple" /><category term="Apple" /><category term="C#" /><category term="Go" /><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">Quick and cheap audio editing for online courses</title><link href="http://localhost:4000/2020/08/08/quick-and-cheap-audio-editing-for-online-courses/" rel="alternate" type="text/html" title="Quick and cheap audio editing for online courses" /><published>2020-08-08T22:57:16-04:00</published><updated>2020-08-08T22:57:16-04:00</updated><id>http://localhost:4000/2020/08/08/quick-and-cheap-audio-editing-for-online-courses</id><content type="html" xml:base="http://localhost:4000/2020/08/08/quick-and-cheap-audio-editing-for-online-courses/">&lt;p&gt;A family member is a college professor and her courses this fall will be held virtually. Her lectures will be recorded ahead of time and she asked me for some tips to be more productive.&lt;/p&gt;

&lt;p&gt;Much of this will be for the tools that she is using, Microsoft Powerpoint and &lt;a href=&quot;https://www.techsmith.com/video-editor.html&quot;&gt;Techsmith Camtasia&lt;/a&gt;, but the general ideas work for most tools.&lt;/p&gt;

&lt;p&gt;Use a decent microphone. You can go crazy and spend a lot of money on microphones and associated gear, but you can get very good results with a decent USB microphone.&lt;/p&gt;

&lt;p&gt;The Blue Yeti microphone is a good choice. It has a stand and you can control the pickup pattern that it uses. The pickup pattern is important, you just want to pick up your voice and nothing else. &lt;a href=&quot;https://www.amazon.com/Blue-Yeti-USB-Microphone-Blackout/dp/B00N1YPXW2&quot;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The HyperX QuadCast microphone is another good choice. Designed for gamers, it has configurable pickup patterns, a built-in pop filter, and a stand. It also comes with a built-in shock mount. That will filter out any sounds that would be transmitted through your desk. &lt;a href=&quot;https://www.amazon.com/dp/B07NZZZ746&quot;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The RØDE NT-USB is another good USB microphone that comes with a stand. &lt;a href=&quot;https://www.amazon.com/Rode-NT-USB-Versatile-Studio-Quality-Microphone/dp/B00KQPGRRE&quot;&gt;Amazon&lt;/a&gt;. I use its big brother, the RØDE Podcaster. &lt;a href=&quot;https://www.bhphotovideo.com/c/product/450171-REG/Rode_PODCASTER_Podcaster_USB_Broadcast_Microphone.html&quot;&gt;B&amp;amp;H&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ll probably want to use a pop filter with your microphone. Put your hand in front of your mouth and then say the letter “L”, followed by the letter “P”. Did you feel more air move when you said “P”?  That’s because the effort to say “P” is a &lt;a href=&quot;https://www.vocabulary.com/dictionary/plosive&quot;&gt;plosive speech sound&lt;/a&gt;. Without a pop filter, that rush of air will get picked up by the microphone.&lt;/p&gt;

&lt;p&gt;Depending on what comes with the microphone, you may or may not need an external pop filter. You can usually find a decent one that clips to the microphone or stand for $15-$20 dollars.&lt;/p&gt;

&lt;p&gt;To get a consistent sound, you’ll want to record in the same place. Every room has different acoustics and it’s jarring to the audience to hear changes in the sound.&lt;/p&gt;

&lt;p&gt;You’ll want to deaden the sound, basically remove any echos. If your room has bare walls, your voice will bounce around a bit. I have acoustic panels in my office, they help a lot. You can make your own, it’s basically linen fabric wrapped around insulation, inside a wood frame.  If you are doing a lot of recording, you may want to look into doing that as a DIY project. &lt;/p&gt;

&lt;p&gt;If you can hang up blankets or quilts around you, that will work just as well. And quilts hanging on the wall will look much better than acoustic panels.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-tCS4jHP/0/9cf820f9/M/quiltingroom-M.jpg?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;The quilting wall in my wife’s home office helps dampen the sound for her Zoom calls.&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;Get in the habit of speaking into the microphone at the same location and angle. That will help get a consistent sound.&lt;/p&gt;

&lt;p&gt;Also, you’ll want to record and edit your audio with a nice set of comfortable headphones. This will allow you to hear exactly what you recorded and filter out everything else that is going on.&lt;/p&gt;

&lt;p&gt;I love Camtasia, but the audio editing tools are less evolved than the video editing tools. What I do is to record and edit the audio separately. We’ll be using Audacity here. Audacity is a free and open-source audio editing tool that is available on multiple platforms. You can get it &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;here&lt;/a&gt;. Go install it now, I’ll wait.&lt;/p&gt;

&lt;p&gt;You can record your audio directly with Audacity or you can take existing audio from a Camtasia project. Either way, you can clean up the audio in less time than it would from within Camtasia.&lt;/p&gt;

&lt;p&gt;If you recorded the audio and video together, you can separate the audio and video tracks from within Camtasia. Once you have the clip loaded on the timeline, right-click on the clip and select “Separate Audio and Video”. You’ll now have individual audio and video tracks. &lt;/p&gt;

&lt;p&gt;If you go to the Share menu, you can select “Export Audio Only…”. Save the file as a .wav file. Now you can open the file in Audacity. When you open the file i&lt;span style=&quot;font-size: inherit;&quot;&gt;t may give you a warning about choosing an import method. Audacity can either work with a copy of the file or edit it directly. Either way will work.&lt;/span&gt;&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-FDs3XxV/0/219afa5d/L/warning-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;Warning message from Audacity&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;Once you have the file opened in Audacity, we can reduce the background noise. Select a section of the file where you are not talking. From the Effect menu, select “Noise Reduction…”.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-RQc5csK/0/ab7d95d5/L/pick-noise-reduction-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;Selecting the Noise Reduction effect for the selected audio&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;Once you have the file opened in Audacity, we can reduce the background noise. If you don’t have a lot of background noise, you can skip this step. Select a section of the file where you are not talking. From the Effect menu, select “Noise Reduction…”.&lt;/p&gt;

&lt;p&gt;A dialog will open up. Click the “Get Noise Profile” button. It will scan the selected clip and build a noise profile. Then, select the entire clip (press Ctrl-A) and select “Noise Reduction…” from the Effect menu. This time, press the “Ok” button.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-mgH7DWg/0/78409178/L/noise-reduction-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;The Noise Reduction effect&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;Now you can normalize the volume in Audacity. This will allow your narration to have the same volume for every clip. You can select Normalize from the effects menu. You set it at a maximum db level. Your peak should be at -6 db. You can go lower, like -8 db, but you once you pick that level, that’s the level you want to use for the entire video. If someone else will be mastering the audio afterward, find out what level they want you to use.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-wN8fVCC/0/00f88adc/L/normalize-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;The Normalize effect&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;And that is the peak level, the overall audio should be in the range from -9db to -18 db. You can use the normalize filter to set the level so that the peak is at -6db. This will raise all of the levels, including pops, clicks, and other noises in the recording in between your words. That makes it easier to find and remove them.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-bdpCV8T/0/4054a35f/L/hard-limit-L.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;The Hard Limit option of the Limiter effect&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;If your voice has a lot of dynamic range, you may find that setting the peaks to -6db doesn’t raise the rest of your voice enough. What you can do is to raise the level higher, to say -3db. Then run the hard limiter filter at -6db. That will clip the peaks to -6db and the net effect is that your voice will sounder louder.&lt;/p&gt;

&lt;p&gt;Once you have the audio level set, you want to remove any and all sounds in between your words  Not every word, just in the pauses. Select that section so that it’s highlighted and press the Ctrl-L key combination  That will silence that section. You still want to do this after running the noise reduction filter.&lt;/p&gt;

&lt;p&gt;To make your time more efficient in Audacity, you can assign keyboard shortcuts to the filters that you used the most. If you open up the Audacity preferences, from the Edit menu or by pressing CTRL-P, you can select “Keyboard” and edit the key bindings. I assigned the CTRL-8, CTRL-9, and CTRL-0 shortcuts to the Noise Reduction, Normalize, and Limiter filters. Those shortcuts were not being used, and they are easy to remember.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-9S8K5Lh/0/de9e342d/M/audacity-keyboard-prefs-M.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;Keyboard shortcuts, use them&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;If you find that your voice has “click” sounds, you’ll want to remove as many of them as you can. There is a de-click effect with Audacity, but I haven’t had much luck with it. I use a program called &lt;a href=&quot;https://www.izotope.com/en/shop/rx-elements.html&quot;&gt;RX 7 Essentials&lt;/a&gt; from Izotrope that does a nice job of removing the clicks out of my voice. It retails for $129, but they run sales from time to time. Two weeks ago, I paid $29 for it. There is &lt;a href=&quot;https://www.izotope.com/en/academic/store-listing.html&quot;&gt;50% education discount&lt;/a&gt; on their site. If you are doing a lot of videos, this can save you a lot of time. If you have this tool, you may not even need to use Audacity.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-PmrtLCb/0/221d167a/XL/rx%20editor-XL.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;RX Essentials with the De-click dialog&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;Once you are done cleaning up the audio, you can import it into Camtasia as a media file. Drop it on the timeline in a track above the existing audio track. That will make it easier to line it up in place. Once you have it in the right place, you can just delete the original audio track from the timeline.&lt;/p&gt;

&lt;p&gt;If you are doing a presentation that is a series of Powerpoint slides, you’ll want a second of silence in between each slide. Basically, a half-second at the end of one slide, then another half-second at the start of the next slide. You can use the Camtasia tools to measure a 1 one-second clip, but a &lt;a href=&quot;https://app.pluralsight.com/profile/author/julie-lerman&quot;&gt;friend&lt;/a&gt; shared a quick way to this. &lt;/p&gt;

&lt;p&gt;Record a one second of silence audio file. Add it to your Camtasia project. At the end of the audio for a slide, add the one-second clip to the timeline. If each slide is it’s one video clip, extend the end of the clip to the halfway position of the one-second clip. Then place the next slide’s clip next to the previous slide on the timeline. If you need a copy of a one-second clip, I put one &lt;a href=&quot;https://github.com/anotherlab/course-editing-tips/blob/master/bin/One%20Second.wav&quot;&gt;here&lt;/a&gt; that you can download.&lt;/p&gt;

&lt;p&gt;If your slides are in a single clip, split the clip at the end of the first slide. Move the timeline cursor to that position and press the “s” key. That will split the clip at that point. You can then drag the of the clip to the halfway point. Make sure to hold the ALT key down when dragging the edge of the clip. That extends the last frame of the clip.&lt;/p&gt;

&lt;p&gt;One more tip for Camtasia. Turn off the preferences setting for “Auto-normalize Loudness”. It’s hidden under the Projects tab in the Windows version of Camtasia and defaults to being on for new installations. You’ll want to disable this feature.&lt;/p&gt;

&lt;p&gt;If you are following your own script and you have a sentence that you keeping mangling when you try to say, there are a couple of things to try. One is to keep saying it until you get it right. Another thing is to change the wording. What looks good written down may, for whatever reason, fail to flow off your tongue.&lt;/p&gt;

&lt;p&gt;Another thing that you do is to pause during the sentence that is killing you. Say part of the sentence, pause, then continue with the rest. You can use the audio editing tools to clip out the pauses so it sounds more natural.&lt;/p&gt;

&lt;p&gt;If you need to embed a link in your video and you just have a video file, use a &lt;a href=&quot;https://en.wikipedia.org/wiki/QR_code&quot;&gt;QR code&lt;/a&gt; and let them scan the code with their phone. There are tons of free QR code generators on the Internet. I used QRCode Monkey to create the following QR code and placed into a Powerpoint slide.&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2020/i-xQvn9LK/0/bffc3486/XL/ppt%20qrcode-XL.png?w=680&amp;#038;ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &amp;lt;figcaption&amp;gt;&lt;em&gt;Scan it with your phone’s camera, it’s just my Twitter timeline&lt;/em&gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/p&gt;

&lt;p&gt;They give you a fair amount of tweaking to the QR code format. If you do something like this, add a 5-second pause and tell people to pause the video while they scan the code with their phone.&lt;/p&gt;

&lt;p&gt;And that’s the budget-friendly way of getting a better sound out of your narration.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Authoring" /><category term="audacity" /><category term="camtasia" /><category term="editing" /><category term="video" /><summary type="html">Some quick and cheap tips to cleaning up the audio for video training courses</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://rajapet.com/wp-content/uploads/2020/08/desk-M.jpg" /><media:content medium="image" url="http://rajapet.com/wp-content/uploads/2020/08/desk-M.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using PowerShell to set the Num Lock state</title><link href="http://localhost:4000/2020/07/06/using-powershell-to-set-the-num-lock-state/" rel="alternate" type="text/html" title="Using PowerShell to set the Num Lock state" /><published>2020-07-06T09:36:18-04:00</published><updated>2020-07-06T09:36:18-04:00</updated><id>http://localhost:4000/2020/07/06/using-powershell-to-set-the-num-lock-state</id><content type="html" xml:base="http://localhost:4000/2020/07/06/using-powershell-to-set-the-num-lock-state/">&lt;p&gt;During these work from home times, on the &lt;a href=&quot;https://tenor.com/EpSG.gif&quot;&gt;darkest timeline&lt;/a&gt;, I spent a lot of my day using my work PC over an RDP connection. For some reason, every time I connected, the Num Lock status would be set to off. Which is silly and annoying. &lt;/p&gt;

&lt;p&gt;When you are connected to a remote machine and you press the Num Lock key on your keyboard, it toggles the Num Lock state for both the client and guest machine. Which can get confusing if you are working with apps on both machines and the Num Lock state is different between the machines. Ideally, you want the Num Lock state to be the same on both machines.&lt;/p&gt;

&lt;p&gt;For me, the preference was a command-line &lt;span style=&quot;font-size: inherit;&quot;&gt;option for setting Num Lock. My shell of choice on Windows is &lt;/span&gt;&lt;a style=&quot;font-size: inherit;&quot; href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7&quot;&gt;PowerShell&lt;/a&gt;&lt;span style=&quot;font-size: inherit;&quot;&gt;, so I decided to write a PowerShell script to set the Num Lock Status. The Num Lock key is a toggle switch, press once to turn on, press again to turn off. The script needed to be able to check the current state to be able to set a specified state correctly.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With a little trial and error, I came up with the following script. I put it on gist to make it easier to grab and make your own:&lt;/p&gt;

&lt;div style=&quot;tab-size: 8&quot; id=&quot;gist104147912&quot; class=&quot;gist&quot;&gt;
  &lt;div class=&quot;gist-file&quot; translate=&quot;no&quot;&gt;
    &lt;div class=&quot;gist-data&quot;&gt;
      &lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
        &lt;div id=&quot;file-num-lock-ps1&quot; class=&quot;file my-2&quot;&gt;
          &lt;div itemprop=&quot;text&quot; class=&quot;Box-body p-0 blob-wrapper data type-powershell  &quot;&gt;
            &lt;div class=&quot;js-check-bidi blob-code-content&quot;&gt;
              &lt;template class=&quot;js-file-alert-template&quot;&gt; 
              
              &lt;div data-view-component=&quot;true&quot; class=&quot;flash flash-warn flash-full d-flex flex-items-center&quot;&gt;
                &lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt; &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt; This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. &lt;a href=&quot;https://github.co/hiddenchars&quot; target=&quot;_blank&quot;&gt;Learn more about bidirectional Unicode characters&lt;/a&gt; &lt;/span&gt; 
                
                &lt;div data-view-component=&quot;true&quot; class=&quot;flash-action&quot;&gt;
                  &lt;a href=&quot;&quot; data-view-component=&quot;true&quot; class=&quot;btn-sm btn&quot;&gt; Show hidden characters &lt;/a&gt;
                &lt;/div&gt;
              &lt;/div&gt;&lt;/template&gt; &lt;template class=&quot;js-line-alert-template&quot;&gt; 
              
              &lt;span aria-label=&quot;This line has hidden Unicode characters&quot; data-view-component=&quot;true&quot; class=&quot;bidi-line-alert tooltipped tooltipped-e&quot;&gt; &lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt; &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;&gt;&lt;/path&gt; &lt;/svg&gt; &lt;/span&gt;&lt;/template&gt; 
              
              &lt;table class=&quot;highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file&quot; data-tab-size=&quot;8&quot; data-paste-markdown-skip=&quot;&quot; data-tagsearch-lang=&quot;PowerShell&quot; data-tagsearch-path=&quot;num-lock.ps1&quot;&gt;
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L1&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;1&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; One parameter, to set the Num Lock state to On or Off, with&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L2&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;2&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; On as the default&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L3&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;3&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;Param&lt;/span&gt;(
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L4&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;4&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    [&lt;span class=&quot;pl-c1&quot;&gt;Parameter&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;$false&lt;/span&gt;)]
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L5&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;5&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    [&lt;span class=&quot;pl-c1&quot;&gt;ValidateSet&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;On&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Off&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)]
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L6&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;6&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    [&lt;span class=&quot;pl-k&quot;&gt;String&lt;/span&gt;[]] &lt;span class=&quot;pl-smi&quot;&gt;$onoff&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;On&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L7&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;7&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    )
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L8&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;8&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L9&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;9&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Get the current state of the Num Lock key&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L10&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;10&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-smi&quot;&gt;$CurrentState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-k&quot;&gt;console&lt;/span&gt;]::NumberLock
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L11&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;11&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L12&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;12&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; the RequestedState, based in the command line param. &lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L13&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;13&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; On is true, Off is false&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L14&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;14&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;$onoff&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;On&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L15&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;15&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC15&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-smi&quot;&gt;$RequestedState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;$true&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L16&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;16&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC16&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L17&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;17&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC17&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L18&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;18&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC18&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-smi&quot;&gt;$RequestedState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;$false&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L19&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;19&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC19&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L20&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;20&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC20&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L21&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;21&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC21&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; If the requested state is the current state, we declare&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L22&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;22&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC22&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; victory and go home&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L23&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;23&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC23&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;$RequestedState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$CurrentState&lt;/span&gt;) {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L24&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;24&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC24&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;$CurrentState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;$false&lt;/span&gt;)
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L25&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;25&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC25&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L26&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;26&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC26&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c1&quot;&gt;Write-Host&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Num Lock is already off&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L27&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;27&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC27&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L28&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;28&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC28&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L29&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;29&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC29&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c1&quot;&gt;Write-Host&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Num Lock is already on&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L30&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;30&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC30&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L31&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;31&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC31&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L32&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;32&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC32&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L33&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;33&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC33&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;$CurrentState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;$false&lt;/span&gt;)
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L34&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;34&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC34&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L35&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;35&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC35&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c1&quot;&gt;Write-Host&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Num Lock is off, turning on&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L36&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;36&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC36&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L37&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;37&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC37&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L38&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;38&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC38&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c1&quot;&gt;Write-Host&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Num lock is on, turning off&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L39&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;39&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC39&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L40&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;40&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC40&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; If the requested state is not the current state, then&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L41&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;41&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC41&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; we need to do a Num Lock press&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L42&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;42&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC42&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L43&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;43&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC43&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Create a new instance of the WScript object and send&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L44&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;44&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC44&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; the NumLock key press to it&lt;/span&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L45&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;45&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC45&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    (&lt;span class=&quot;pl-c1&quot;&gt;New-Object&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;#8211;&lt;/span&gt;ComObject WScript.Shell).SendKeys(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{NUMLOCK}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
                  &lt;/td&gt;
                &lt;/tr&gt;
                
                &lt;tr&gt;
                  &lt;td id=&quot;file-num-lock-ps1-L46&quot; class=&quot;blob-num js-line-number js-code-nav-line-number&quot; data-line-number=&quot;46&quot;&gt;
                  &lt;/td&gt;
                  
                  &lt;td id=&quot;file-num-lock-ps1-LC46&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;
                    }
                  &lt;/td&gt;
                &lt;/tr&gt;
              &lt;/table&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&quot;gist-meta&quot;&gt;
      &lt;a href=&quot;https://gist.github.com/anotherlab/863fc3f60379c29b2ebb8478859754c8/raw/fb74599d40cf2cf639a753db4f7fba9b38709cb5/num-lock.ps1&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt; &lt;a href=&quot;https://gist.github.com/anotherlab/863fc3f60379c29b2ebb8478859754c8#file-num-lock-ps1&quot;&gt; num-lock.ps1 &lt;/a&gt; hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I put the comments inline, it should be pretty self-explanatory with the comments. While PowerShell is supported on macOS and Linux now, this is a Windows only script. The [console] ::NumberLock expression returns the following error message:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OperationStopped: Operation is not supported on this platform.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which is odd, [console] is a shortcut for [&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.console?view=netcore-3.1&quot;&gt;system.console&lt;/a&gt;], a class that is accessible on the macOS Powershell. If you run the following command in a PowerShell on either Windows or macOS, you’ll get a list of static properties that should be readable from a POSH script.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; title: ; notranslate&quot; title=&quot;&quot;&gt;
&amp;#91;system.console] | Get-Member -Static -MemberType property | Format-Table 
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the NumberLock property is listed, but just not implemented. And that’s not even the real sticking point. This script creates an instance of a WScript object and uses it’s SendKeys method to pass in a Num Lock key press. WScript is the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wscript&quot;&gt;Windows Script Host&lt;/a&gt;, a technology that lets scripting languages make Windows API calls. A minor sticking point, I only need this Windows. You can get a list of the special keys that SendKeys can send from &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.sendkeys.send?view=netcore-3.1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s the heavy lifting. Because I am lazy, I don’t want to type in the name of the script. So I created an alias for it.&lt;/p&gt;

&lt;div class=&quot;wp-block-syntaxhighlighter-code &quot;&gt;
  &lt;pre class=&quot;brush: powershell; title: ; notranslate&quot; title=&quot;&quot;&gt;
Set-Alias nl d:\scripts\num-lock.ps1
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I can just run “nl” or “nl On” or “nl Off” to change the Num Lock state. I added the alias to the profile so it’s always available. Now when I connect to my work PC, I run “nl” and all is well.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Annoyances" /><category term="PowerShell" /><category term="POSH" /><category term="RDP" /><summary type="html">A quick PowerShell script for setting the Num Lock state</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://rajapet.com/wp-content/uploads/2020/07/keyboard_mono.jpg" /><media:content medium="image" url="http://rajapet.com/wp-content/uploads/2020/07/keyboard_mono.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Colored notes in OneNote</title><link href="http://localhost:4000/2020/05/23/colored-notes-in-onenote/" rel="alternate" type="text/html" title="Colored notes in OneNote" /><published>2020-05-23T16:57:18-04:00</published><updated>2020-05-23T16:57:18-04:00</updated><id>http://localhost:4000/2020/05/23/colored-notes-in-onenote</id><content type="html" xml:base="http://localhost:4000/2020/05/23/colored-notes-in-onenote/">&lt;p&gt;I like using &lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/onenote/digital-note-taking-app&quot;&gt;OneNote&lt;/a&gt; when I’m working on a project with different kinds of assets. I’m in the middle of doing a new course for &lt;a href=&quot;https://www.pluralsight.com/authors/christopher-miller&quot;&gt;Pluralsight&lt;/a&gt; that will be out in a couple of months. I have slides, a script, PowerPoint decks, code, media files, etc. It can get a little confusing trying to keep track of everything.&lt;/p&gt;

&lt;p&gt;For the new course, I have been using OneNote to map out each module. The way I create the content is that I create a PowerPoint deck for each module and then write a script for the narration of the deck. I create a new OneNote file for the course, and then add a tab for each module. Inside each module, there are tabs for each section of that module. I have one tab for just for notes and links to resources.&lt;/p&gt;

&lt;p&gt;Each tab has multiple OneNote paragraphs, basically one paragraph for each slide. To make it easy to pick out paragraphs, I wanted to give each paragraph it’s own background colors. It makes it easier to find the text that I want and I can move stuff around and easily see what text belongs in each paragraph. You would think it would be as simple as right-clicking in the paragraph and selecting the color. No, that is not an option.&lt;/p&gt;

&lt;p&gt;You could just place a colored shape behind the paragraph. That kind of works, but it’s an annoyance if you are constantly editing the text as the shape will not resize with the text.&lt;/p&gt;

&lt;p&gt;There is another way, and it’s a bit of a hack. You can do this for new text or for a paragraph that you already have added.&lt;/p&gt;

&lt;p&gt;For an existing paragraph, copy the text, and cut it from the paragraph. Then, insert a 1×1 table into the paragraph. Next, paste the text into the single cell table.&lt;/p&gt;

&lt;p&gt;Click on the table and select the Layout tab in the OneNote ribbon. In the Format section of the Layout ribbon, select the drop-down arrow for shading. Now you can pick the color that you want for the paragraph. Now you have colored paragraphs and the color matches the size of the text. And with the default borders for a table, you get a simple box drawn around the text.&lt;/p&gt;

&lt;p&gt;For a new paragraph, insert the 1×1 table first and just start typing into the table cell. By default, OneNote will add a new table row for each hard return of the Enter key. A way around that is to press Shift-Enter twice at the end of the first line and arrow back up the first newline. As long as you leave one empty line at the bottom, pressing the Enter key will keep the text in a single row.&lt;/p&gt;

&lt;p&gt;I can take no credit for this technique, I saw it mentioned a few times on &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=the%20internets&quot;&gt;the Internets&lt;/a&gt;.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="OneNote" /><category term="colors" /><category term="OneNote" /><summary type="html">A quick way to color paragraphs in OneNote.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://rajapet.com/wp-content/uploads/2020/05/ColoredTables.png" /><media:content medium="image" url="http://rajapet.com/wp-content/uploads/2020/05/ColoredTables.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>