<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-16T20:47:32-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chris Miller’s 4th Blog</title><subtitle>My personal blog, 4th version</subtitle><author><name>Chris Miller</name></author><entry><title type="html">MyFirebaseMessagingService android:exported needs to be explicitly specified</title><link href="http://localhost:4000/2023/03/22/android-exported/" rel="alternate" type="text/html" title="MyFirebaseMessagingService android:exported needs to be explicitly specified" /><published>2023-03-22T00:00:00-04:00</published><updated>2023-03-22T00:00:00-04:00</updated><id>http://localhost:4000/2023/03/22/android-exported</id><content type="html" xml:base="http://localhost:4000/2023/03/22/android-exported/">&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;//assets/steam_punk_beker.jpg&quot; alt=&quot;Changing the API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I needed to make a small change to an Android apop that we have in the Google Play store. I made the change, generated a new apk and we submitted to the app store. And was immediately rejected by Google. Our app was targetting API level 30 and the Google now requires API level 31 or later.&lt;/p&gt;

&lt;p&gt;The app is a Xamarin.Forms app and I opened up the Android project and changed changed android:targetSdkVersion in the manifest from 30 to 31. And then the app stopped building.
I have a new course that was just published this week on Pluralsight, &lt;a href=&quot;http://www.pluralsight.com/courses/xamarin-forms-5-fundamentals.&quot;&gt;“Xamarin.Forms 5 Fundamentals”&lt;/a&gt;. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms.&lt;/p&gt;

&lt;p&gt;From my own product blurb:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course.&lt;/p&gt;

&lt;p&gt;If you are working with &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/maui?WT.mc_id=DT-MVP-5000200&quot;&gt;Maui&lt;/a&gt;, a lot of this will still be applicable. The parts that are different, well, stay tuned.&lt;/p&gt;</content><author><name>anotherlab</name></author><category term="Android" /><category term="Xamarin" /><category term="Xamarin" /><category term="Android" /><category term="API" /><summary type="html">I needed to make a small change to an Android apop that we have in the Google Play store. I made the change, generated a new apk and we submitted to the app store. And was immediately rejected by Google. Our app was targetting API level 30 and the Google now requires API level 31 or later. The app is a Xamarin.Forms app and I opened up the Android project and changed changed android:targetSdkVersion in the manifest from 30 to 31. And then the app stopped building. I have a new course that was just published this week on Pluralsight, “Xamarin.Forms 5 Fundamentals”. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms. From my own product blurb: You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications. If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course. If you are working with Maui, a lot of this will still be applicable. The parts that are different, well, stay tuned.</summary></entry><entry><title type="html">My new Xamarin.Forms 5 Pluralsight course is out</title><link href="http://localhost:4000/2022/09/21/psc-xf5-fundamentals/" rel="alternate" type="text/html" title="My new Xamarin.Forms 5 Pluralsight course is out" /><published>2022-09-21T00:00:00-04:00</published><updated>2022-09-21T00:00:00-04:00</updated><id>http://localhost:4000/2022/09/21/psc-xf5-fundamentals</id><content type="html" xml:base="http://localhost:4000/2022/09/21/psc-xf5-fundamentals/">{:refdef: style=&quot;text-align: center;&quot;}
![School is in session'?](/assets/cyberpunk3.jpg)
{: refdef}

I have a new course that was just published this week on Pluralsight, [&quot;Xamarin.Forms 5 Fundamentals&quot;](http://www.pluralsight.com/courses/xamarin-forms-5-fundamentals.). It's seven hours of tutorials and demos for the developer new to Xamarin.Forms.

From my own product blurb:
&gt; You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications.

If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course.

If you are working with [Maui](https://learn.microsoft.com/en-us/dotnet/maui?WT.mc_id=DT-MVP-5000200), a lot of this will still be applicable. The parts that are different, well, stay tuned.</content><author><name>anotherlab</name></author><category term="Pluralsight" /><category term="Visual Studio" /><category term="Xamarin" /><category term="Xamarin" /><category term="Maui" /><summary type="html">I have a new course that was just published this week on Pluralsight, “Xamarin.Forms 5 Fundamentals”. It’s seven hours of tutorials and demos for the developer new to Xamarin.Forms. From my own product blurb: You will learn how to set up a Xamarin.Forms development environment and get started building apps. First, you will gain the knowledge of the basic structure. Next, you will understand how to use data binding to wire the data to the UI. Finally, you will know how to customize the UI with styling and theming. When you are finished with this course, you will have the skills and knowledge of the Xamarin.Forms framework to get started building cross-platform, native mobile applications. If you want to learn about how to use MVVM, Maps, localization, styling, etc; please check the course. If you are working with Maui, a lot of this will still be applicable. The parts that are different, well, stay tuned.</summary></entry><entry><title type="html">Running the iOS simulators after updating to Xcode 14</title><link href="http://localhost:4000/2022/09/17/Visual-Studio-New-Xcode/" rel="alternate" type="text/html" title="Running the iOS simulators after updating to Xcode 14" /><published>2022-09-17T00:00:00-04:00</published><updated>2022-09-17T00:00:00-04:00</updated><id>http://localhost:4000/2022/09/17/Visual-Studio-New-Xcode</id><content type="html" xml:base="http://localhost:4000/2022/09/17/Visual-Studio-New-Xcode/">{:refdef: style=&quot;text-align: center;&quot;}
![Deployment Target](/assets/giger-dev-001.png)
{: refdef}
So Apple updated Xcode on my Macbook from 13.4.1 to 14. I wasn't paying much attention to the prompts or even the version numbers. After doing so, I could not longer access the iOS Simulators from Visual Studio. This happened for both Xamarin.Forms projects and for Maui. From Windows or the Mac, it was broken. 

From the Mac, when I went to pick a simulator for a Maui project, this happened with [Visual Studio 2022 17.4, Preview 2](https://learn.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#17.4.0-pre.2?WT.mc_id=DT-MVP-5000200).

{:refdef: style=&quot;text-align: center;&quot;}
![Lower the 'Deployment Target'?](/assets/no_sim_edit.png)
{: refdef}

That &quot;Lower the 'Deployment Target' to see the older simulators or check your Apple SDK path&quot; message was somewhat less than helpful. I couldn't figure out where to even set the Deployment target in Dotnet Maui. 

I then loaded up a Xamarin.Forms app that was working fine a few days ago and saw the same results. I guess at this moment in time, Xcode 14 is not fully suppported. At some point it will all line up again, but in the meantime I need some iOS simulation. This wasn't a regression in VS 17.4, this was Apple. Time to rollback Xcode and give that a shot.

Xcode is actually pretty decent about handling this. You can have multiple versions of Xcode installed and change up which one is the one that answers the call to duty. If you trying out Xcode betas, this is the way. All you need is gigabytes of disk storage and the patience to download and install the Xcode bits.

The first thing that you need to do is to download the version of Xcode to install. You can get every release of Xcode from xcodereleases.com. While that site is not Apple affiliated with Apple, all of the download links are from developer.appple.com. They are the official releases. I grabbed the final the Xcode 13 release, 13.4.1 from [here](https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_13.4.1/Xcode_13.4.1.xip).

[Extract](https://osxdaily.com/2018/11/02/open-extract-xip-file-mac/#:~:text=Assuming%20you%20haven't%20associated,the%20Finder%20of%20Mac%20OS.) the contents of the .xip file. It will be named Xcode.app. Since you already have an Xcode.app in the Applications folder, you'll need to rename it. My preference is to name it with version. In this case, Xcode13_4_1.app. Then drag it to the Applications folder.

And then make it the default Xcode. From a shell, run the following

{% highlight shell %}
sudo xcode-select -s /Applications/Xcode13_4_1.app
{% endhighlight %}

To verify that this is now the current version of Xcode, run the following

{% highlight shell %}
sudo xcode-select -p
{% endhighlight %}

That should come back with something like

{% highlight shell %}
/Applications/Xcode13_4_1.app/Contents/Developer
{% endhighlight %}

After doing that, I restarted Visual Studio and I had the simulators back

{:refdef: style=&quot;text-align: center;&quot;}
![Thar be simulators'?](/assets/yes_sim_edit.png)
{: refdef}


To switch back to latest version, just run xcode-select again

{% highlight shell %}
sudo xcode-select -s /Applications/Xcode
{% endhighlight %}


After posting this, a friend [posted](https://twitter.com/BiloganSteve/status/1571477869817204738) with a link to where this issue was raised.  It's posted as an issue in the [xamarin/xamrin-macios](https://github.com/xamarin/xamarin-macios/issues/15954) repo.</content><author><name>anotherlab</name></author><category term="Coding" /><category term="Visual Studio" /><category term="Xcode" /><category term="Xamarin" /><category term="Maui" /><category term="xcode-select" /><summary type="html">So Apple updated Xcode on my Macbook from 13.4.1 to 14. I wasn’t paying much attention to the prompts or even the version numbers. After doing so, I could not longer access the iOS Simulators from Visual Studio. This happened for both Xamarin.Forms projects and for Maui. From Windows or the Mac, it was broken. From the Mac, when I went to pick a simulator for a Maui project, this happened with Visual Studio 2022 17.4, Preview 2. That “Lower the ‘Deployment Target’ to see the older simulators or check your Apple SDK path” message was somewhat less than helpful. I couldn’t figure out where to even set the Deployment target in Dotnet Maui. I then loaded up a Xamarin.Forms app that was working fine a few days ago and saw the same results. I guess at this moment in time, Xcode 14 is not fully suppported. At some point it will all line up again, but in the meantime I need some iOS simulation. This wasn’t a regression in VS 17.4, this was Apple. Time to rollback Xcode and give that a shot. Xcode is actually pretty decent about handling this. You can have multiple versions of Xcode installed and change up which one is the one that answers the call to duty. If you trying out Xcode betas, this is the way. All you need is gigabytes of disk storage and the patience to download and install the Xcode bits. The first thing that you need to do is to download the version of Xcode to install. You can get every release of Xcode from xcodereleases.com. While that site is not Apple affiliated with Apple, all of the download links are from developer.appple.com. They are the official releases. I grabbed the final the Xcode 13 release, 13.4.1 from here. Extract the contents of the .xip file. It will be named Xcode.app. Since you already have an Xcode.app in the Applications folder, you’ll need to rename it. My preference is to name it with version. In this case, Xcode13_4_1.app. Then drag it to the Applications folder. And then make it the default Xcode. From a shell, run the following sudo xcode-select -s /Applications/Xcode13_4_1.app To verify that this is now the current version of Xcode, run the following sudo xcode-select -p That should come back with something like /Applications/Xcode13_4_1.app/Contents/Developer After doing that, I restarted Visual Studio and I had the simulators back To switch back to latest version, just run xcode-select again sudo xcode-select -s /Applications/Xcode After posting this, a friend posted with a link to where this issue was raised. It’s posted as an issue in the xamarin/xamrin-macios repo.</summary></entry><entry><title type="html">A quick check to see if the user’s locale is metric or imperial</title><link href="http://localhost:4000/2022/01/05/quick-check-for-if-the-locale-ismetric/" rel="alternate" type="text/html" title="A quick check to see if the user’s locale is metric or imperial" /><published>2022-01-05T00:00:00-05:00</published><updated>2022-01-05T00:00:00-05:00</updated><id>http://localhost:4000/2022/01/05/quick-check-for-if-the-locale-ismetric</id><content type="html" xml:base="http://localhost:4000/2022/01/05/quick-check-for-if-the-locale-ismetric/">While working on a demo mobile app for a course, I needed to know if the units of measurement on the app would be in [Imperial](https://en.wikipedia.org/wiki/Imperial_units) units or [Metric](https://en.wikipedia.org/wiki/Metric_system) units. Since I'm using C#, the tools are in the framework.

My first pass was just checking the locale and calling it imperial if the locale was &quot;en-US&quot;.

{% highlight csharp %}
using System.Globalization;

var locale = CultureInfo.CurrentCulture.Name;

var IsMetric = !locale.Equals(&quot;en-US&quot;);
{% endhighlight %}

It worked on my machine, but that is pretty flawed. It assumes that only the &quot;en-US&quot; locale use imperial units. While it often feels like the rest of the world is metric, the US is not the only country still on the imperial system. Both Liberia and Myanmar are in the imperial club.

{:refdef: style=&quot;text-align: center;&quot;}
![Works on my machine](/assets/say-it-works-on-my-machine-again.jpg)
{: refdef}

This code also makes the assumption that &quot;en-US&quot; is the only locale code for the US.  If you set your phone's region to the US and the language to Spanish, the locale code could be &quot;es-US&quot;.  Instead of comparing against the locale name, we can use the [RegionInfo](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo) class instead.  We can pass in the locale in to RegionInfo and check it's `IsMetric` property.

{% highlight csharp %}
using System.Globalization;

var locale = CultureInfo.CurrentCulture.Name;

var regionInfo = new RegionInfo(locale);

var IsMetric = regionInfo.IsMetric;
{% endhighlight %}</content><author><name>Chris Miller</name></author><category term="Coding" /><category term="Localization" /><category term="Globalization" /><category term="C#" /><category term="CultureInfo" /><category term="RegionInfo" /><summary type="html">While working on a demo mobile app for a course, I needed to know if the units of measurement on the app would be in Imperial units or Metric units. Since I’m using C#, the tools are in the framework. My first pass was just checking the locale and calling it imperial if the locale was “en-US”. using System.Globalization; var locale = CultureInfo.CurrentCulture.Name; var IsMetric = !locale.Equals(&quot;en-US&quot;); It worked on my machine, but that is pretty flawed. It assumes that only the “en-US” locale use imperial units. While it often feels like the rest of the world is metric, the US is not the only country still on the imperial system. Both Liberia and Myanmar are in the imperial club. This code also makes the assumption that “en-US” is the only locale code for the US. If you set your phone’s region to the US and the language to Spanish, the locale code could be “es-US”. Instead of comparing against the locale name, we can use the RegionInfo class instead. We can pass in the locale in to RegionInfo and check it’s IsMetric property. using System.Globalization; var locale = CultureInfo.CurrentCulture.Name; var regionInfo = new RegionInfo(locale); var IsMetric = regionInfo.IsMetric;</summary></entry><entry><title type="html">A failed MakeValid call in SQL Server</title><link href="http://localhost:4000/2021/12/28/a-failed-makevalid-call-in-sql-server/" rel="alternate" type="text/html" title="A failed MakeValid call in SQL Server" /><published>2021-12-28T00:00:00-05:00</published><updated>2021-12-28T00:00:00-05:00</updated><id>http://localhost:4000/2021/12/28/a-failed-makevalid-call-in-sql-server</id><content type="html" xml:base="http://localhost:4000/2021/12/28/a-failed-makevalid-call-in-sql-server/">We hit this strange bug in SQL Server earlier in the year. A single SQL Statement would just kill the connection. It would kill it 100% in any version of SQL Server from 2016 and up. Let’s start with the SQL Statement.

{% gist a97bf849285c710fcf6e6428b2fd4536 MakeValidCall.sql %}

It’s a lot of data. It came from GPS data collected over a route. Visually the data looks like this.

&lt;figure&gt;&lt;image src=&quot;/assets/MakeValidMap2.gif&quot;/&gt;&lt;figcaption&gt;Rendering the data in segments&lt;/figcaption&gt;&lt;/figure&gt;

The goal was to take the data and use [MakeValid](https://docs.microsoft.com/en-us/sql/t-sql/spatial-geometry/makevalid-geometry-data-type?view=sql-server-ver15) to clean it up. MakeValid() takes invalid data and attempts to convert it to a valid SQLGeometry instance. For this example, the call to MakeValid() never completes and eventually your connection times out.

The curious thing is if you used [SQLGeography](https://docs.microsoft.com/en-us/sql/t-sql/spatial-geography/spatial-types-geography?view=sql-server-ver15) instead of [SQLGeometry](https://docs.microsoft.com/en-us/dotnet/api/microsoft.sqlserver.types.sqlgeometry?view=sql-dacfx-150), MakeValid works. Here is some sample code that uses C# with the SQLGeography MakeValid calls on the same data. It executes just fine

{% gist 44a706a3792cf079f1e2512b4695447d %}

We first [posted it to Stack Overflow as a question](https://stackoverflow.com/q/66496778/206). That generated some interesting dialog and some really good analysis. I opened a support ticket with Microsoft over the connection failing. It wasn’t so much about MakeValid() not working, but how the failure of the call would kill the connection.

Microsoft Support determined that code in SQLGeometry MakeValid() was running out of memory trying to evaluate all of the points. The code in SQLGeography’s MakeValid is different because &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/t-sql/spatial-geography/spatial-types-geography?view=sql-server-ver15&quot; target=&quot;_blank&quot;&gt;SQLGeography&lt;/a&gt; is very different from &lt;a href=&quot;SQLGeometry&quot; target=&quot;_blank&quot;&gt;SQLGeometry&lt;/a&gt;.

The SQLGeometry data types and methods work in a flat space. SQLGeography is based on a round-earth coordinate system. In other words, when you work with distances, SQL Geometry is just a flat 2D polygon. It will calculate the same results for coordinates near the equator as they would further away. The greater the distance between the points, the less accurate it will be. SQLGeography will factor in the curvature of the earth and it knows that the horizontal distance between two difference latitude values will depend on how far they are away from the equator.

The end result with Microsoft was that this has been logged as a product issue to be looked at some point in the future. Which is fine, we adapted our code to use SQLGeography instead of SQLGeometry.</content><author><name>Chris Miller</name></author><category term="SQL Server" /><category term="SQL" /><category term="MakeValid" /><category term="SQLGeography" /><category term="SQLGeometry" /><category term="GPS" /><summary type="html">We hit this strange bug in SQL Server earlier in the year. A single SQL Statement would just kill the connection. It would kill it 100% in any version of SQL Server from 2016 and up. Let’s start with the SQL Statement.</summary></entry><entry><title type="html">Moved the blog from WordPress to Jekyll</title><link href="http://localhost:4000/2021/12/15/Migrated-to-jekyll/" rel="alternate" type="text/html" title="Moved the blog from WordPress to Jekyll" /><published>2021-12-15T10:31:33-05:00</published><updated>2021-12-15T10:31:33-05:00</updated><id>http://localhost:4000/2021/12/15/Migrated-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2021/12/15/Migrated-to-jekyll/">First post under the new regime.

# Back story

For a long time, this blog has been created with WordPress. It's now a &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; site.

The blog started as a free blog hosted on Google's Blogger platform. It's &lt;a href=&quot;http://anotherlab.blogspot.com/&quot; target=&quot;_blank&quot;&gt;still there&lt;/a&gt;, but hasn't been touched in 8 years. It was fine, but I felt limited by the platform. 

The second incarnation was on WordPress. I did it the hard way. I created a Linux VM on Azure and manually wired up the &lt;a href=&quot;https://en.wikipedia.org/wiki/LAMP_(software_bundle)&quot; target=&quot;_blank&quot;&gt;LAMP stack&lt;/a&gt;. It was a good learning experience with Linux and WordPress.

It was fine until a few years ago when there was a serious attack on WordPress sites. It was a [vulnerability](https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html) that allowed anyone to edity any post on any WordPress sites. My site was one the ones that was hit.

With [a bit of work](/2017/02/21/and-then-my-blog-was-defaced/), I was able to restore the site. I viewed the entire VM as compromised and generated a new VM in Azure. This time I used a &lt;a href=&quot;https://bitnami.com/stack/wordpress&quot; target=&quot;_blank&quot;&gt;Bitnami WordPress&lt;/a&gt; image so there was a lot less work to get it up and running. I still had to add my own SSL certificate through &lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot;&gt;Let's Encryt&lt;/a&gt;. I also signed up for a &lt;a href=&quot;jetpack.com/upgrade/backup/&quot; target=&quot;_blank&quot;&gt;Jetpack&lt;/a&gt; subscription to let them manage the backups of the site.

Because this is a self-hosted WordPress site, I am responsible for updating the various moving parts. That was easy to do with the old system, annoying to do with the Bitnami image. It seems that the preferred way to do updates was to create a new VM and migrate the WordPress data over. That's a little too much work.

# New Boss in Town
WordPress is a great platform, but it's overkill for what I need, which is just a blog host. So I decided to migrate it over to Jekyll. I edit the blog on my own machine, in [Ubuntu on Windows 10](https://ubuntu.com/tutorials/ubuntu-on-windows#1-overview). It uses &lt;a href=&quot;https://www.markdownguide.org/&quot; target=&quot;_blank&quot;&gt;Markdown&lt;/a&gt; for the posts, which is handy for just knocking out stuff. The Jekyll tooling will bundle the files to a static set of pages that can be hosted by just about anything. In this case, it's hosted under &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;GitHub Pages&lt;/a&gt;.

Since it's a static site, it has a tiny footprint and has much less exposure to being hacked. If it did get hacked, it would be fixed the next time I pushed out an update. I was able to install a WordPress plugin that exported the existing site to Jekyll formatted Markdown files. I'll have to tweak some of posts. The content is all there, but there are some CSS styling issues to resolve. The source code was using a WordPress plugin for doing syntax highlighting on code snippets. Jekyll has the equivalent feature, it's just a matter of going back and editing the old posts.

And since Jekyll is a static site engine, dynamic features like comments are not included out of the box. I went with a Jekyll plugin that uses Github Discussions for comments..

The Jekyll tooling is very Linux oriented. I'm running Windows 10, so I used Ubuntu running on WSL2. This gave me the power of the Linux command line tools while still leaving over the option of using Windows tools for file editing. It's easy to access the Windows file system from Linux on WSL2 and vice versa. There's a really cool Markdown editor called &lt;a href=&quot;markdownmonster.west-wind.com&quot; target=&quot;_blank&quot;&gt;Markdown Monster&lt;/a&gt; that makes editing a breeze. I highly recommend it.

# The process
So writing and updating posts is very different than the traditional WordPress experience. With the WordPress site, I would create posts in the site, using the WordPress web tools. Until it was was posted, it would be a draft. Their &lt;a href=&quot;https://wordpress.org/gutenberg/&quot; target=&quot;_blank&quot;&gt;Gutenberg editor&lt;/a&gt; was a block based editor that I was never comfortable with.

With Jekyll, I just create a Markdown file with the right tags and in the right folder. Then I use git to push it to the repo for the site. Between the git command and the &lt;a href=&quot;https://github.com/cli/cli&quot; target=&quot;_blank&quot;&gt;GitHub CLI&lt;/a&gt;, I can do the workflow right from the command line.

As for backing up the site, it's backed up and versioned by being a GitHub repository. If I need to rebuild the Ubuntu environment, I would need to reinstall a few things (brew, Jekyll, gh), but it's not rocket science. I can also backup and restore the Ubuntu environment. It's as simple as:

{% highlight text %}
wsl --export Ubuntu c:\data\ubuntu.tar
{% endhighlight %}

Then to restore it, you need to provide a distribution name and a location for the distribution.

{% highlight text %}
wsl --import UbuntuBlog c:\data\UbuntuBlog c:\data\ubuntu.tar
{% endhighlight %}

# What's next
By the time this post is public, I'll have already transferred the domain name over. I have a few images in the WordPress site, I'll need to grab them. When I move from Blogger to WordPress, I made the decision to not host the images in WordPress. Almost all of my blog post images are hosted on my SmugMug site. I figured if I ever moved the blog again, that would be one less thing to worry about.

I also have some draft posts. I had a handful of stuff that I was going to blog about, but never finished. They were not exported, but that's OK. Jekyll has a concept of &lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot; target=&quot;_blank&quot;&gt;draft posts&lt;/a&gt; and I'll just put them all in there.

# Post migrations
There is some cleanup that I need to do. I had used a [Jekyll plugin](https://github.com/benbalter/wordpress-to-jekyll-exporter) for WordPress to export the posts to Markdown files. It It converts all pages, posts, and settings to files that can be dropped in to a Jekyll site. It did most of the heavy lifting, but there were some rough edges that needed to be sanded down.

## Titles
At the top of a Jekyll post, there is a metadata section that is called [&quot;Front Matter&quot;](https://jekyllrb.com/docs/front-matter/). It's in YAML format has the title of the post, the date, categories, tags, and other stuff. The plugin was using HTML escape codes for special characters in the title. That was not being parsed correctly and the escape code would print instead of the character. So I added rules in my conversion tool to write the escape codes as the action charactors.

I had to tweak the `date:` values that had been exported. The export had written the dates as Date/Time with my local (UTC-5:00) timezone. I discovered an odd quirk. Jekyll was taking the date/time and handling it as UTC±00:00. I had a post with a time of 11:19PM in UTC -5 on the 3rd day of the month. To Jekyll, that was the 4th day. That broke the link rendering. So I updated my migration tool to strip the time out of tge `date:` field.

## Other Front Matter cleanup
The export added a bunch of tags that needed to be cleaned. The following is the Front Matter from a post

{% highlight yaml lineno %}
id: 3247
title: Colored notes in OneNote
date: 2020-05-23T15:57:18-05:00
author: Chris Miller
excerpt: A quick way to color paragraphs in OneNote.
layout: post
guid: http://rajapet.com/?p=3247
permalink: /2020/05/23/colored-notes-in-onenote/
spay_email:
  - &quot;&quot;
image: http://rajapet.com/wp-content/uploads/2020/05/ColoredTables.png
categories:
  - OneNote
tags:
  - colors
  - OneNote
{% endhighlight %}
The &quot;id:&quot; tag refers to a row in the WordPress database, so that one goes. The &quot;author:&quot; goes because it's just me. The &quot;excerpt:&quot; tag is a WordPress feature. Jekyll handles excerpts differently. I'll leave it there for now. Same for &quot;images:&quot;. The &quot;guid:&quot; and &quot;spay_mail:&quot; tags are WordPress, so they go. I don't need the &quot;permlink:&quot;, so it also goes. So after running my conversion tool, I would get Front Matter that would look like this
{% highlight yaml lineno %}
title: Colored notes in OneNote
date: 2020-05-23T15:57:18-05:00
excerpt: A quick way to color paragraphs in OneNote.
image: http://rajapet.com/wp-content/uploads/2020/05/ColoredTables.png
categories:
  - OneNote
tags:
  - colors
  - OneNote
{% endhighlight %}

## CSS &amp; Markup changes
I'm using a Jekyll theme called [&quot;Minimal Mistakes&quot;](https://mmistakes.github.io/minimal-mistakes/). It's a nice clean design and I like. There are a few things that I wanted to change, mostly with some CSS overrides. I'm not touching the actual theme bits. That makes it eassier to update or replace the theme. The way Jekyll's Markdown processor, [kramdown](https://kramdown.gettalong.org/index.html), handles `&lt;figure&gt;`{:.html} is a little quirky and I'm seeing `&lt;/figure&gt;`{:.html} in the rendered output. I'm fixing those by hand as I come across them. That's the problem with leaky abstractions, sometimes, you have leaks to patch.

For some reason, the Youtube clips that I embedded in a few posts didn't make it over. That had to be fixed manually. I would go back to the post on the WordPress blog, right-click on the video, and then select &quot;coopy embed code&quot;. Then I would just paste it in the Markdown file.
## Code Highlighting
This is a work in progress. For the last few years, I've been using the built in support that WordPress provides for source code highlighting. That is relatively ease for my tool to identify. Jekyll uses a code highlighter called [Rouge](http://rouge.jneen.net/). It does most of the same stuff, and I'll use it as is for now. I can catch ~~most~~some of the snippets that used the WordPress markup, I'll fix up the stragglers as I come across them.

I had a few gist's embedded in my blog. When the posts were exported, the gists had been rendered into the page and it was a lot of ugly HTML. I had to manually replace those bits with ```{% raw %}{% gist XXXXX %}{% endraw %}```, which made the Markdown simpler.

## Other Stuff
I added a gem file, [jekyll-twitter-plugin](https://github.com/rob-murray/jekyll-twitter-plugin), for rendering embedded Tweets. The cool thing is that once I installed it, it properly displayed the tweets that I had embedded in WordPress. I'm migrating them over to use the [Liquid tags](https://jekyllrb.com/docs/step-by-step/02-liquid/), it's much easier to work with. I ended up not being able to use that plugin. GitHub Pages only supports a [fixed list of plugins](https://pages.github.com/versions/), and that one wasn't on it. So I did it the hard way, go to the tweet in Twitter, click the &quot;⋯&quot; menu, and select the &quot;Embed Tweet&quot; option.

After most of the posts have been updated, I'll post the conversion tool. It's not really a standalone app. It's a [LINQpad](https://www.linqpad.net/) script written in C#. It's very easy to dump out the data structures so I can see what is coming in and what I need to do to fix it. When it's closer to being done, I'll make a command line app out of it so it will run on anything that supports .NET 6.

## What I lost
I gave up some functionality by moving off of WordPress. It was running in my VM, I had complete control. I could install any WordPress plugin I wanted. While there are many plugins for Jekyll, GitHub pages only supports a fixed subset. It hasn't blocked me from doing anything just yet.

I could see a preview of the blog post before publishing on WordPress. If I edit the posts with Markdown Monster, I get a nice wysiwyg view of the Markdown, but not for the Liquid tags. But you can run a local Jekyll server and you'll see pretty much how it will be rendered. 

Publishing takes a few more steps. Instead of pressing the &quot;publish&quot; button in WordPress, it gets done through git:

1. git add -A
2. git commit -m &quot;Change notes&quot;
3. git push
4. [gh pr create -f](https://cli.github.com/manual/gh_pr_create)
5. [gh pr merge -m](https://cli.github.com/manual/gh_pr_merge)

Then it takes a couple of minutes for GitHub Pages to run Jekyll on it's end to render the pages.

But I'm pleased with how it came out.</content><author><name>Chris Miller</name></author><category term="Jekyll" /><category term="WordPress" /><category term="Blog" /><category term="Ubuntu" /><summary type="html">First post under the new regime.</summary></entry><entry><title type="html">Resolving the .NET MAUI “VersionCode 1.0 is invalid. It must be an integer value.” error when updating Visual Studio 2022 Preview</title><link href="http://localhost:4000/2021/10/21/resolving-the-net-maui-versioncode-1-0-is-invalid-it-must-be-an-integer-value-error-when-updating-visual-studio-2022-preview/" rel="alternate" type="text/html" title="Resolving the .NET MAUI “VersionCode 1.0 is invalid. It must be an integer value.” error when updating Visual Studio 2022 Preview" /><published>2021-10-21T00:19:33-04:00</published><updated>2021-10-21T00:19:33-04:00</updated><id>http://localhost:4000/2021/10/21/resolving-the-net-maui-versioncode-1-0-is-invalid-it-must-be-an-integer-value-error-when-updating-visual-studio-2022-preview</id><content type="html" xml:base="http://localhost:4000/2021/10/21/resolving-the-net-maui-versioncode-1-0-is-invalid-it-must-be-an-integer-value-error-when-updating-visual-studio-2022-preview/">I installed the Visual Studio 2022 Preview 6 this evening. I had been using Preview 4. I installed Preview 5, but didn't have a chance to play with it. I have a simple demo app that I have working with, a basic stopwatch type of app. That app had been created with Preview 4 and it more or less worked fine (unless you counted Mac Catalyst and Windows). After I installed Preview 6, I tried to run the project on Android. It failed to compile with the following error message:

{% highlight text %}
Severity	Code	Description	Project	File	Line	Suppression State
Error	XA0003	VersionCode 1.0 is invalid. It must be an integer value.
Parameter name: VersionCode	StopwatchMaui	....\StopwatchMaui\obj\Debug\net6.0-android\android\AndroidManifest.xml
{% endhighlight %}

As a test, I created a new .NET MAUI app from Preview 6. It compiled and ran just fine.

So who now, what now? When I first saw the error, I didn&amp;#8217;t pay too much attention to the full path, just the file name. With .NET MAUI, there is an AndroidManifest.xml in the android platform folder.

&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-6fGFssK/0/fbc04600/O/01%20-%20Solution%20Explorer.png&quot; alt=&quot;&quot;  /&gt;

And we take a look at the file, it&amp;#8217;s pretty standard, pretty boring AndroidManifest.xml

{% highlight xml %}
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
	&lt;uses-sdk android:minSdkVersion=&quot;21&quot; android:targetSdkVersion=&quot;31&quot; /&gt;
	&lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/appicon&quot; android:roundIcon=&quot;@mipmap/appicon_round&quot; android:supportsRtl=&quot;true&quot;&gt;&lt;/application&gt;
	&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
&lt;/manifest&gt;
{% endhighlight %}

No versionCode there. What&amp;#8217;s going on? So I went back and actually read the error message and it was complaining about a version of AndroidManifest.xml located in obj\Debug\net6.0-android. That little fellow looks like this:

{% highlight xml linenos %}
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!--
    This code was generated by a tool.
    It was generated from ....\StopwatchMaui\Platforms\Android\AndroidManifest.xml
    Changes to this file may cause incorrect behavior and will be lost if
    the contents are regenerated.
    --&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;1.0&quot; package=&quot;com.companyname.StopwatchMaui&quot; android:versionName=&quot;1.0.0&quot;&gt;
  &lt;uses-sdk android:minSdkVersion=&quot;21&quot; android:targetSdkVersion=&quot;31&quot; /&gt;
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
  &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
  &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/appicon&quot; android:roundIcon=&quot;@mipmap/appicon_round&quot; android:supportsRtl=&quot;true&quot; android:name=&quot;crc64c1104ba8f6ea44b3.MainApplication&quot; android:label=&quot;StopwatchMaui&quot; android:debuggable=&quot;true&quot; android:extractNativeLibs=&quot;true&quot;&gt;
    &lt;activity android:configChanges=&quot;orientation|smallestScreenSize|screenLayout|screenSize|uiMode&quot; android:theme=&quot;@style/Maui.SplashTheme&quot; android:name=&quot;crc64c1104ba8f6ea44b3.MainActivity&quot; android:exported=&quot;true&quot;&gt;
      &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
      &lt;/intent-filter&gt;
    &lt;/activity&gt;
    &lt;receiver android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:label=&quot;Essentials Battery Broadcast Receiver&quot; android:name=&quot;crc64192d9de59b079c6d.BatteryBroadcastReceiver&quot; /&gt;
    &lt;receiver android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:label=&quot;Essentials Energy Saver Broadcast Receiver&quot; android:name=&quot;crc64192d9de59b079c6d.EnergySaverBroadcastReceiver&quot; /&gt;
    &lt;receiver android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:label=&quot;Essentials Connectivity Broadcast Receiver&quot; android:name=&quot;crc64192d9de59b079c6d.ConnectivityBroadcastReceiver&quot; /&gt;
    &lt;activity android:configChanges=&quot;orientation|screenSize&quot; android:name=&quot;crc64192d9de59b079c6d.IntermediateActivity&quot; /&gt;
    &lt;provider android:authorities=&quot;com.companyname.StopwatchMaui.fileProvider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot; android:name=&quot;xamarin.essentials.fileProvider&quot;&gt;
      &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/xamarin_essentials_fileprovider_file_paths&quot; /&gt;
    &lt;/provider&gt;
    &lt;activity android:configChanges=&quot;orientation|screenSize&quot; android:name=&quot;crc64192d9de59b079c6d.WebAuthenticatorIntermediateActivity&quot; /&gt;
    &lt;service android:name=&quot;crc64396a3fe5f8138e3f.KeepAliveService&quot; /&gt;
    &lt;provider android:name=&quot;mono.MonoRuntimeProvider&quot; android:exported=&quot;false&quot; android:initOrder=&quot;1999999999&quot; android:authorities=&quot;com.companyname.StopwatchMaui.mono.MonoRuntimeProvider.__mono_init__&quot; /&gt;
  &lt;/application&gt;
&lt;/manifest&gt;
{% endhighlight %}


If we look at line 8, we see the culprit

{% highlight xml %}
&lt;manifest 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; 
    android:versionCode=&quot;1.0&quot; 
    package=&quot;com.companyname.StopwatchMaui&quot; 
    android:versionName=&quot;1.0.0&quot;&gt;
{% endhighlight %}

In the new app that was created in Preview 6, the same file had the following line:

{% highlight xml %}
&lt;manifest 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; 
    android:versionCode=&quot;1&quot; 
    package=&quot;com.companyname.StopwatchMaui&quot; 
    android:versionName=&quot;1.0.0&quot;&gt;
{% endhighlight %}


&lt;div class=&quot;wp-block-image&quot;&gt;
  &lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-mF3bHJm/0/4ebec4dc/O/badgood.jpg?&quot; alt=&quot;&quot;  /&gt;&lt;/figure&gt;
&lt;/div&gt;

So why is the first one bad and the second one good? In the wacky world of Android, android:versionCode has to have an integer value. This is documented [here](https://developer.android.com/guide/topics/manifest/manifest-element). So now we know what is the actual error, the next question is why that error occurred. 

We can&amp;#8217;t just edit the obj\Debug\net6.0-android\AndroidManifest.xml file and call it a day. The next time you rebuild the app, that file gets generated from Platforms\Android\AndroidManifest.xml. And apparently it pulls in information from somewhere else as well.

So I took a look at the .csproj files for the working and non-working apps. In the .csproj file generated by Preview 4, the version information was defined with the following two lines

{% highlight xml %}
&lt;!-- Versions --&gt;
&lt;ApplicationVersion&gt;1.0&lt;/ApplicationVersion&gt;
&lt;AndroidVersionCode&gt;1&lt;/AndroidVersionCode&gt;
{% endhighlight %}

With the new project freshly generated by Release 6, the same two lines were now a single line, with the ApplicationVersion now set with an integer value.

{% highlight xml %}
&lt;!-- Versions --&gt;
&lt;ApplicationVersion&gt;1&lt;/ApplicationVersion&gt;
{% endhighlight %}

When I changed the “Versions” lines .csproj to match the single line used in the new .csproj Preview 6, the app compiled and deployed to Android. My best guess is that AndroidVersionCode was being used in Preview 4 and sometime after that, they made the breaking change to ApplicationVersion and jettisoned the AndroidVersionCode setting. It&amp;#8217;s a preview release of Visual Studio and they are still baking .NET MAUI. This [kind of stuff happens](https://developercommunity.visualstudio.com/t/versioncode-10-is-invalid/1553498) and the end result is a better product.</content><author><name>Chris Miller</name></author><category term="Android" /><category term="MAUI" /><category term="android" /><category term="maui" /><summary type="html">I hit the &quot;VersionCode 1.0 is invalid&quot; error with .NET MAUI and resolved it.</summary></entry><entry><title type="html">Controlling a WSL installation of redis-server from the Windows command line</title><link href="http://localhost:4000/2021/10/19/controlling-a-wsl-installation-of-redis-server-from-the-windows-command-line/" rel="alternate" type="text/html" title="Controlling a WSL installation of redis-server from the Windows command line" /><published>2021-10-19T00:53:13-04:00</published><updated>2021-10-19T00:53:13-04:00</updated><id>http://localhost:4000/2021/10/19/controlling-a-wsl-installation-of-redis-server-from-the-windows-command-line</id><content type="html" xml:base="http://localhost:4000/2021/10/19/controlling-a-wsl-installation-of-redis-server-from-the-windows-command-line/">&lt;p&gt;If you like using &lt;a href=&quot;https://redis.io/&quot;&gt;redis&lt;/a&gt; for web site caching and you are writing and testing code locally from Windows, you’ll want to figure out how to run a local instance of redis-server. You have a few options. You can run it from another machine that’s running something vaguely Linux-like or MacOS. You can run it from a Docker container under Windows. Or you can run it directly from &lt;a href=&quot;http://Windows SubSystem (WSL) for Linux&quot; data-wplink-url-error=&quot;true&quot;&gt;Windows SubSystem (WSL) for Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the last few years, Windows (10, 11, Server 2019) comes with a compatibility layer that lets you run Linux binary executables. The current version is WSL 2, but I’m just going to refer to it as WSL. If you don’t have installed already, just run the following command from an elevated shell (run as administrator)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wsl --install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt; 
&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-pTtQzxz/0/0a5988c8/L/02%20-%20wsl-install-L.png&quot; alt=&quot;Installing WSl via command line&quot; /&gt; &lt;figcaption&gt;Installing WSl via command line&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;It will install the bits that you need and then ask you to reboot your machine. For more information about installing and configuring WSL, Microsoft has some really good documentation at &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install&quot;&gt;Install WSL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The default Linux distribution for WSL is Ubuntu. After you reboot, you may see a Ubuntu shell for a while as Windows installs the bits that you need. It will churn for a bit and then ask you for a username and password. That password will be your sudo (user root) password. One that is done, you should see something like this.&lt;figure&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-43gLWHP/0/54984ae6/L/02%20-%20ubuntu-install-L.png&quot; alt=&quot;Final step of installing WSL is configuring the default Linux distribution&quot; /&gt; &lt;figcaption&gt;Final step of installing WSL is configuring the default Linux distribution&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;The next thing to do is to install redis-server. We can install redis vis &lt;a href=&quot;https://en.wikipedia.org/wiki/APT_(software)&quot;&gt;apt-get&lt;/a&gt;, but before we do that, we need to update apt-get and remove some of the new install shininess off.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get update
sudo apt-get upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After updating apt-get, you’ll want to upgrade it. Confusing? Sort of. Update is updating the instance of apt-get, upgrade is updating all of the packages that were installed via apt-get. After that has finished, you can install redis-server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install redis-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There will be some churn and finally, it be installed. Out of the box, redis will not be running. My personal preference is to only run redis when I’m actually using it for development. So I Iike to start and stop it from the command line. Here are commands that you need to know:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo service redis-server status
sudo service redis-server start
sudo service redis-server stop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll start up redis with the service start command, and it will come back with a message that redis is starting. And you can use the service status command to verify that it’s running. The acid test is to connect to redis and see if it’s working. You can use the redis-cli tool to set and get a cache value. You should see something like this.&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-vLhVGKK/0/6aaf4c9d/O/04%20-%20redis-cli.png&quot; alt=&quot;Running redis-cli from the Ubuntu shell&quot; /&gt; &lt;figcaption&gt;Running redis-cli from the Ubuntu shell&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;So now redis-server is running. If you close the shell and open up a new one, it will still be running. If you restart WSL or Windows, then it wont be running. Now you can always pop open an Ubuntu shell and start redis-server, but you can do it from a Windows command line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wsl sudo service redis-server status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-ffr3dZN/0/71f62819/O/05%20-%20redis-pwsh.png&quot; alt=&quot;Running redis commands from PowerShell&quot; /&gt;&lt;figcaption&gt;Running redis commands from PowerShell&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;From the screenshot, you can see that WSL passed along the sudo service command to Ubunto. And because I used sudo, I was prompted for the root password. And it returned the same message that I would see from the Ubuntu shell. Since I only have Ubunto installed, that was the default Linux that received the command. If you have multiple distributions installed, you would use “wsl -d DistributionName”. You can get the names of the installed distributions with the “wsl -l” command. Unlike from the Linux shell, each time I invoke “sudo”, I’m prompted for the password. In the Linux shell, you are prompted just the first time you call sudo in a terminal session.&lt;/p&gt;

&lt;p&gt;Having to use the root password over and over again can be tedious on a development box. There is a way around that. You can add a file to the /etc/sudoers.d folder in the Linux distribution and remove the root password requirement for the redis-server service. From the Linux shell do the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /etc/sudoers.d
sudo sh
echo &quot;%sudo ALL=(ALL) NOPASSWD: /usr/sbin/service redis-server *&quot; &amp;gt;&amp;gt; allowed-services
sudo chmod 0440 allowed-services
exit&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&quot;https://i1.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-bdhLSQW/0/003b70be/O/06%20-%20sudoers.png&quot; alt=&quot;&quot; /&gt; &lt;/figure&gt;

&lt;p&gt;The first thing we do is make /etc/sudoers.d the current folder. Then we use “sudo sh” to gain root access. You need root access to work with this folder. The echo line basically says that you can invoke sudo with no password for redis-server and writes that setting to a file named allowed-services. The file name allowed-services is arbitrary, I picked it because it made sense to me. There is a file in the sudoers.d folder named README, it will explain what the file name restrictions are.&lt;/p&gt;

&lt;p&gt;The chmod 0440 command sets the permissions to read-only for the root account and is required for sudoers.d. This allows us to remove the sudo password requirement for redis-server and only for redis-server. Now we can go back to the Windows shell and run the wsl commands without being prompted.&lt;/p&gt;

&lt;p&gt;You can even run the redis-cli tool from powershell…&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://i2.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-5jWGFRF/0/c4e9ba5e/O/07%20-%20redis-pwsh.png&quot; alt=&quot;Redis from PowerShell, no password&quot; /&gt;
&lt;figcaption&gt;Redis from PowerShell, no password&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Windows Subsystem for Linux is one of the hidden gems for developers. And this gem sparkles…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus Round!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because I’m lazy, I created shortcuts in my PowerShell profile. I added the following functions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;function redstat {wsl sudo service redis-server status}
function redstart {wsl sudo service redis-server start}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now I can just check the redis-server status via “redstat”&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://i0.wp.com/photos.smugmug.com/Blog/n-zwT5d/2021/i-MBk5v8J/0/afa5b1b0/O/08-redstat.png&quot; alt=&quot;&quot; /&gt; 
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Extra Bonus Round!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you would like to have redis startup when Windows boots up, you just need a couple of extra steps. You just need to create a batch file that starts up redis.&lt;/p&gt;

&lt;p&gt;In your Windows startup folder, create a batch file. If you press Win+R and type shell:startup, that will open up and instance of Windows Explorer in the user startup foider.  From the command line the following will place you into the same folder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  cd %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Create a batch file in that folder. I used “start redis.cmd”, any name that the OS will recgize as a batch file will work. In that file, add the following line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  wsl sudo service redis-server start
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next time you reboot, redis will be started.&lt;/p&gt;</content><author><name>Chris Miller</name></author><category term="Coding" /><category term="Linux" /><category term="linux" /><category term="Powershell" /><category term="redis" /><category term="wsl" /><summary type="html">Some shortcuts accessing redis-server running under WSL via PowerShell</summary></entry><entry><title type="html">How to access Apple’s App Connect API from C#, Python, and Go. - Part 4</title><link href="http://localhost:4000/2021/09/01/how-to-access-apples-app-connect-api-from-c-python-and-go-part-4/" rel="alternate" type="text/html" title="How to access Apple’s App Connect API from C#, Python, and Go. - Part 4" /><published>2021-09-01T07:56:57-04:00</published><updated>2021-09-01T07:56:57-04:00</updated><id>http://localhost:4000/2021/09/01/how-to-access-apples-app-connect-api-from-c-python-and-go-part-4</id><content type="html" xml:base="http://localhost:4000/2021/09/01/how-to-access-apples-app-connect-api-from-c-python-and-go-part-4/">Welcome to Part 4 of a three part series. Last month, I did a series of posts on how to use Apple&amp;#8217;s App Connect API to query the team membership list using [C#](/2021/07/09/how-to-access-apples-app-connect-api-from-c-python-and-go-part-1/), [Go](/2021/07/19/how-to-access-apples-app-connect-api-from-c-python-and-go-part-3/), and [Python](/2021/07/12/how-to-access-apples-app-connect-api-from-c-python-and-go-part-2/). This was code I was actually using myself and after I wrote it, it stopped working. The API calls were returning an HTTP 401 error. But only on Windows, on the Mac the code worked.

That was an odd one to track down. It turned out to be a bug with how I was generating the expiration timestamp for the JWT payload. Apple documents that you can specify up to 20 minutes into the future for the exp value. Don&amp;#8217;t do the full 20 minutes. That works most of time. Until it doesn&amp;#8217;t. Just set the timeout to 10 minutes into the future and Bob&amp;#8217;s your uncle. 

I went back to the repo&amp;#8217;s and changed the expiration timeout to 10 minutes for the [C#](https://github.com/anotherlab/IsUserinApple-dotnet), [Go](https://github.com/anotherlab/IsUserInApple-golang), and [Python](https://github.com/anotherlab/IsUserInApple-python) repos. The C# code was set to 30 minutes, that should have never worked. If you tried the C# code and wondered why it wasn&amp;#8217;t working, that was my mistake.

While I was updating the code, I changed the Go version so that you could validate multiple user names by placing them in a line delimited file and pass that file in with a &amp;#8220;-userlist&amp;#8221; command line parameter. The code now reads all of the usernames and stores them in an array. It then gets all of the team members and checks to see if any of the user names in the array match the team member list. If you need to validate multiple users, this makes it a one and done task.

The &amp;#8220;-username&amp;#8221; parameter can still be used if you just have one user to check. In that case, it&amp;#8217;s treated as an array with just one item in it. If you use both &amp;#8220;-username&amp;#8221; and &amp;#8220;-userlist&amp;#8221;, the code will use the user list and ignore the user name passed on the command line.

I&amp;#8217;m not sure why the code worked when I originally wrote the posts a couple of months ago. My guess is that Apple used to allow timestamps longer than 20 minutes but made a change that now enforces the expiration to their published specification. Test for edge conditions, but avoid using them.</content><author><name>Chris Miller</name></author><category term="Apple" /><category term="Apple" /><category term="C" /><category term="C#" /><category term="Python" /><summary type="html">Welcome to Part 4 of a three part series. Last month, I did a series of posts on how to use Apple’s App Connect API to query the team membership list using C#, Go, and Python. This was code I was actually using myself and after I wrote it, it stopped working. The API calls were returning an HTTP 401 error. But only on Windows, on the Mac the code worked.</summary></entry><entry><title type="html">A quick PowerShell tip</title><link href="http://localhost:4000/2021/07/28/a-quick-powershell-tip/" rel="alternate" type="text/html" title="A quick PowerShell tip" /><published>2021-07-28T16:19:08-04:00</published><updated>2021-07-28T16:19:08-04:00</updated><id>http://localhost:4000/2021/07/28/a-quick-powershell-tip</id><content type="html" xml:base="http://localhost:4000/2021/07/28/a-quick-powershell-tip/">I have a bunch of PowerShell functions that I stick in my $profile file. Simple stuff, things to make my day to day development work easier. With my sieve-like memory, I need a quick way to see the functions. So I wrote a script named &amp;#8220;mine.ps1&amp;#8221; and it&amp;#8217;s basically a tiny help file. It has stuff like this

{% highlight powershell %}
write-host Commands -ForegroundColor White
write-host &quot;get-guid-clipboard&quot; -ForegroundColor Yellow
write-host &quot;set-alias lsd get-by-date&quot; -ForegroundColor Yellow
write-host &quot;Set-Alias touch Set-FileTime&quot; -ForegroundColor Yellow
{% endhighlight %}

In my $profile, I define those functions. They could (and should) be in a separate file, but I&amp;#8217;m lazy. This is part of my PowerShell profile:

{% highlight powershell %}
function Set-FileTime{
    param(
      [string[]]$paths,
      [bool]$only_modification = $false,
      [bool]$only_access = $false
    )
  
    begin {
      function updateFileSystemInfo([System.IO.FileSystemInfo]$fsInfo) {
        $datetime = get-date
        if ( $only_access )
        {
           $fsInfo.LastAccessTime = $datetime
        }
        elseif ( $only_modification )
        {
           $fsInfo.LastWriteTime = $datetime
        }
        else
        {
           $fsInfo.CreationTime = $datetime
           $fsInfo.LastWriteTime = $datetime
           $fsInfo.LastAccessTime = $datetime
         }
      }
     
      function touchExistingFile($arg) {
        if ($arg -is [System.IO.FileSystemInfo]) {
          updateFileSystemInfo($arg)
        }
        else {
          $resolvedPaths = resolve-path $arg
          foreach ($rpath in $resolvedPaths) {
            if (test-path -type Container $rpath) {
              $fsInfo = new-object System.IO.DirectoryInfo($rpath)
            }
            else {
              $fsInfo = new-object System.IO.FileInfo($rpath)
            }
            updateFileSystemInfo($fsInfo)
          }
        }
      }
     
      function touchNewFile([string]$path) {
        #$null &gt; $path
        Set-Content -Path $path -value $null;
      }
    }
   
    process {
      if ($_) {
        if (test-path $_) {
          touchExistingFile($_)
        }
        else {
          touchNewFile($_)
        }
      }
    }
   
    end {
      if ($paths) {
        foreach ($path in $paths) {
          if (test-path $path) {
            touchExistingFile($path)
          }
          else {
            touchNewFile($path)
          }
        }
      }
    }
  }

function get-by-date {get-childitem | sort LastWriteTime }
function get-guid-clipboard { [guid]::NewGuid() | Set-Clipboard }
set-alias lsd get-by-date
Set-Alias touch Set-FileTime
Set-Alias -Name guidc -Value get-guid-clipboard -Description &quot;Get a GUID and copy it to the clipboard&quot;
function get-mine {. d:\\scripts\mine.ps1}
write-host &quot;Type 'get-mine' for my local functions&quot;
[System.Net.Dns]::GetHostByName($env:computerName).HostName.ToLower()
{% endhighlight %}

The touch functions came from the [ss64.com site](https://ss64.com/ps/syntax-touch.html). I end by displaying the current machine name. When you remote into a box of boxes, it&amp;#8217;s good to know where you currently are. Now when I fire up a new shell, I&amp;#8217;ll see something like this:

{% highlight powershell %}
PowerShell 7.1.3
Copyright (c) Microsoft Corporation.

https://aka.ms/powershell
Type 'help' to get help.

Type 'get-mine' for my local functions
uberbox
Loading personal and system profiles took 929ms.
{% endhighlight %}</content><author><name>Chris Miller</name></author><category term="PowerShell" /><category term="Powershell" /><category term="tips" /><summary type="html">Simple tip for adding your own memory aid to your PowerShell profile.</summary></entry></feed>